import datetime
import random
import string
from aiogram.filters import  Command, or_f
import os
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine
from sqlalchemy import select
from datetime import datetime
from aiogram import types
from aiogram.filters import or_f, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import joinedload
from dateutil import parser
from collections import defaultdict

from sqlalchemy import create_engine, select, select, delete
from sqlalchemy.orm import Session
from apscheduler.schedulers.background import BackgroundScheduler
import time
from aiogram import F, types, Router, Bot
from sqlalchemy import select, update
from sqlalchemy.orm import selectinload
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery
from geopy.distance import geodesic
from flask import Flask, request
from telegram import Update
from telegram.error import TelegramError
from aiogram.filters import StateFilter
import re
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import datetime
import random
import string
from aiogram import Bot, F
from aiogram.types import (
    CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice,
    Message, PreCheckoutQuery, SuccessfulPayment
)
from decimal import Decimal
from aiogram import Router, F
from aiogram.types import CallbackQuery, PreCheckoutQuery, LabeledPrice, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from sqlalchemy.ext.asyncio import AsyncSession
import datetime
import random
import string
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from filters.chat_types import ChatTypeFilter
from kbds import reply
import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from kbds.inline import get_callback_btns
from sqlalchemy.ext.asyncio import AsyncSession
from filters.chat_types import ChatTypeFilter
from kbds import reply
from database.orm_query import (
    orm_get_makers_by_category,
    orm_get_products_by_maker,
    orm_get_product,
    orm_add_user,
    get_user_spent,
    get_user_status,
    get_all_user_ids,
    count_referrals,
    get_products_with_tastes,
    update_product_quantity,
    update_user_spent,
    delete_promo_code,
    orm_get_makers_by_category,
    get_products_with_tastes,
    get_user_balance,
    update_product_quantity,
    get_user_favourites

 
)
from aiogram.types import CallbackQuery
from database.models import  Product, Promocode, Order, User, Favourite, Category, CartItem
user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

sub_router = Router()
sub_router.message.filter(ChatTypeFilter(["private"]))
CHANNEL_ID = "-1002457676283"
ROLES = [ "–ü—Ä–æ—Ö–æ–∂–∏–π ‚ù§Ô∏è","–ü–æ–∫—É–ø–∞—Ç–µ–ª—å üí∏","–ü–æ—Å—Ç–æ—è–Ω–Ω–∏–∫ ‚ù§Ô∏è","–ê–º–±–∞—Å—Å–∞–¥–æ—Ä –°–º–æ–∫–∏ –í–∏–ª–¥–∞ üòç", ]
TOKEN = "8045332204:AAEjbQnp3BMfSpbKGIYV9CH4e-2-xJOZMPU"
bot = Bot(token=TOKEN)
# dp = Dispatcher()
COMMISSION_RATE = Decimal('0.03')
OFFICE_COORDS = (53.535315, 49.349094)
USER_ID =  -1002292552917
#USER_ID = 6777500292

latitude = 53.535315 # –®–∏—Ä–æ—Ç–∞
longitude = 49.349094  # –î–æ–ª–≥–æ—Ç–∞




BOT_NICKNAME = "SmokyWild"
@user_private_router.message(Command('start'))
async def start_cmd(message: types.Message, session: AsyncSession):
    user = message.from_user
    user_id = user.id
    user_ids = await get_all_user_ids(session)

    if user_id not in user_ids:
        start_command = message.text
        referrer_id = None
        if start_command.startswith("/start "):
            referrer_id = start_command.split(" ")[1]
            if referrer_id.isdigit():
                referrer_id = int(referrer_id)
                if referrer_id != user_id:
                    spent = await get_user_spent(session, user_id)
                    status = await get_user_status(session, user_id)
                    if user.username is None:
                        username = "@" + (user.first_name or "username")
                    else:
                        username = user.username
                    await orm_add_user(
                        session,
                        user_id=user.id,
                        first_name=user.first_name,
                        last_name=user.last_name,
                        phone=None,
                        username=username,
                        status=status,
                        referrer_id=referrer_id,
                        balance=0
                    )
                    try:
                        await bot.send_message(referrer_id, "–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
                    except Exception as e:
                        print(f"Failed to send message to referrer: {e}")
                else:
                    await message.answer("–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏!")
        else:
            spent = await get_user_spent(session, user_id)
            status = await get_user_status(session, user_id)
            if user.username is None:
                username = "@" + (user.first_name or "username")
            else:
                username = user.username
            is_subscribed = await check_subscription(user.id)
            if is_subscribed:
                await orm_add_user(
                    session,
                    user_id=user.id,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    phone=None,
                    username=username,
                    status=status,
                    referrer_id=referrer_id,
                    balance=0
                )

    is_subscribed = await check_subscription(message.from_user.id)
    if is_subscribed:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n–ï—Å–ª–∏ —Ç—ã –∏—â–µ—à—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∂–∏–¥–∫–æ—Å—Ç–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≤–µ–π–ø–∏–Ω–≥–∞, —Ç–æ —Ç—ã –ø–æ–ø–∞–ª –ø–æ –∞–¥—Ä–µ—Å—É.\n\n‚ù§Ô∏è –£ –Ω–∞—Å —Ç—ã –Ω–∞–π–¥–µ—à—å —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–ª–∏ –ø–æ–¥ –∑–∞–∫–∞–∑.\n\nüìç –î–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–º—É –¢–æ–ª—å—è—Ç—Ç–∏! –û—Ç —Å—É–º–º—ã —á–µ–∫–∞ 1000—Ä. –ù–æ–≤–∏–∫ –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è\n\n–ê–∫–∫–∞—É–Ω—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - @SmokyWild | –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã 10:00-22:00",
                              reply_markup=reply.start_kb2.as_markup(
                                  resize_keyboard=True,
                                  input_field_placeholder='–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'))

    else:
        await message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª", url='https://t.me/smokyscreen')],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='activate_start')]
            ]
        ))


async def check_subscription(user_id):
    return True
    # try:
    #     member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
    #     return member.status in ['member', 'creator', 'administrator']
    # except Exception as e:
    #     logging.error(f"Error checking subscription: {e}")
    #     return False

@user_private_router.message(Command('support'))
async def support_cmd(message: types.Message, session: AsyncSession):
    await message.answer("—Ö–∞–µ")


@user_private_router.callback_query(F.data.startswith("activate_start"))
async def process_callback_start(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    is_subscribed = await check_subscription(user_id)

    if is_subscribed:
        await callback.message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n–ï—Å–ª–∏ —Ç—ã –∏—â–µ—à—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∂–∏–¥–∫–æ—Å—Ç–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≤–µ–π–ø–∏–Ω–≥–∞, —Ç–æ —Ç—ã –ø–æ–ø–∞–ª –ø–æ –∞–¥—Ä–µ—Å—É.\n\n‚ù§Ô∏è –£ –Ω–∞—Å —Ç—ã –Ω–∞–π–¥–µ—à—å —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–ª–∏ –ø–æ–¥ –∑–∞–∫–∞–∑.\n\nüìç –î–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–º—É –¢–æ–ª—å—è—Ç—Ç–∏! –û—Ç —Å—É–º–º—ã —á–µ–∫–∞ 1000—Ä. –ù–æ–≤–∏–∫ –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è\n\n–ê–∫–∫–∞—É–Ω—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - @SmokyScreenShop | –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã 10:00-22:00",
                                      reply_markup=reply.start_kb2.as_markup(
                                          resize_keyboard=True,
                                          input_field_placeholder='–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'))
    else:
        await callback.message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª", url='https://t.me/smokyscreen')],
                [types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='activate_start')]
            ]
        ))


@user_private_router.message(or_f(Command("profile"), (F.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å üôã‚Äç‚ôÇÔ∏è"), ))
async def profile_cmd(message: types.Message, session: AsyncSession):
    user = message.from_user
    user_id = user.id
    spent = await get_user_spent(session, user_id)
    status = await get_user_status(session, user_id)

    if user.username is None:
        username = "@" + (user.first_name or "username")
    else:
        username = "@" + user.username

    is_subscribed = await check_subscription(user.id)
    if is_subscribed:
        await orm_add_user(
            session,
            user_id=user.id,
            first_name=user.first_name,
            last_name=user.last_name,
            phone=None,
            username=username,
            status=status,
            referrer_id=None,
            balance=0
        )

        bal = await get_user_balance(session, user_id)
        await message.answer(
            f"üë® –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n–õ–æ–≥–∏–Ω: <b>{username}</b>\n–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\nüí∞ –ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É: <b>{spent:.2f}‚ÇΩ</b>\nüå´Ô∏è –î—ã–º–∫–∏: <b>{bal}</b>",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="show_user_orders")],
                ]
            )
        )
    else:
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª", url='https://t.me/smokyscreen')],
                    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='activate_start')]
                ]
            )
        )

@user_private_router.callback_query(lambda c: c.data == "show_user_orders")
async def show_user_orders(callback_query: types.CallbackQuery, session: AsyncSession):
    user_id = callback_query.from_user.id
    stmt = (
        select(Order)
        .options(joinedload(Order.product))
        .where(Order.user_id == user_id)
        .order_by(Order.id.desc())
    )
    result = await session.execute(stmt)
    orders = result.scalars().unique().all()

    if not orders:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    order_groups = defaultdict(list)
    for order in orders:
        order_groups[order.order_number].append(order)

    keyboard = []
    for order_number, order_group in order_groups.items():
        order_number_last_four = order_number[-4:]
        keyboard.append([InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ {order_number_last_four}", callback_data=f"order_{order_group[0].id}")])

    await callback_query.message.answer("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback_query.answer()

@user_private_router.callback_query(lambda c: c.data.startswith("order_"))
async def show_order_details(callback_query: types.CallbackQuery, session: AsyncSession):
    order_id = int(callback_query.data.split("_")[1])
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ order_id
    stmt = (
        select(Order)
        .options(joinedload(Order.product))
        .where(Order.id == order_id, Order.user_id == user_id)
    )
    result = await session.execute(stmt)
    order = result.scalars().unique().one_or_none()

    if not order:
        await callback_query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å —Ç–µ–º –∂–µ order_number
    stmt = (
        select(Order)
        .options(joinedload(Order.product))
        .where(Order.order_number == order.order_number, Order.user_id == user_id)
    )
    result = await session.execute(stmt)
    orders = result.scalars().unique().all()

    if not orders:
        await callback_query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    order_message = f"–ó–∞–∫–∞–∑: <strong>{order.order_number}</strong>\n\n"
    total_price = 0

    for order in orders:
        product = order.product
        created_time = parser.isoparse(str(order.created)).strftime('%Y-%m-%d %H:%M:%S')
        order_message += (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: <strong>{product.name}</strong>,\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: <strong>{product.maker}</strong>,\n–í–∫—É—Å: <strong>{product.taste}</strong>\n"
            f"–¶–µ–Ω–∞: <strong>{order.price}</strong>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <strong>{order.quantity}</strong>\n"
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–ª–∞—Ç—ã: <strong>{order.payment_status}</strong>\n"
            f"–°—Ç–∞—Ç—É—Å: <strong>{order.order_status}</strong>\n"
            f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: <strong>{created_time}</strong>\n\n"
        )
        total_price += order.price * order.quantity

    order_message += f"–û–±—â–∞—è —Ü–µ–Ω–∞: <strong>{total_price}</strong>\n"

    await callback_query.message.edit_text(order_message)
    await callback_query.answer()

@user_private_router.message(or_f(Command("order"), (F.text.lower() == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìã")))
async def order_cmd(message: types.Message, session: AsyncSession):
    is_subscribed = await check_subscription(message.from_user.id)
    if is_subscribed:
        await show_user_orders(message, session)
    else:
        await message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª", url='https://t.me/smokyscreen')],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='activate_start')]
            ]
        ))

# @user_private_router.callback_query(F.data.startswith("order_"))
# async def order_details_callback(callback_query: types.CallbackQuery, session: AsyncSession):
#     order_id = int(callback_query.data.split("_")[1])
#     await show_order_details(callback_query, session, order_id)



def get_callback_btns2(*, btns: dict[str, str], sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    for text, data in btns.items():
        keyboard.add(types.InlineKeyboardButton(text=text, callback_data=data))
    return keyboard.adjust(*sizes).as_markup()


@user_private_router.message(or_f(Command("loyalty_system"), (F.text.lower() == "—Å–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ üì¢")))
async def loyalty_system_cmd(message: types.Message, session: AsyncSession):
    is_subscribed = await check_subscription(message.from_user.id)
    if is_subscribed:
        telegram_user_id = message.from_user.id

        stmt = select(User).where(User.user_id == telegram_user_id)
        result = await session.execute(stmt)
        user = result.scalars().first()

        if user is None:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        user_id = user.user_id

        try:
            bal = await get_user_balance(session, user_id)
        except ValueError as e:
            await message.answer(str(e))
            return

        ref = await count_referrals(session, user_id)

        stmt = select(Promocode).where(Promocode.user_id == user.id)
        result = await session.execute(stmt)
        promocodes = result.scalars().all()

        btns = {}
        if promocodes:
            for promocode in promocodes:
                if promocode.discount_type == "PERCENT":
                    zna = "%"
                else:
                    zna = "‚ÇΩ"
                number = int(promocode.discount_amount)
                button_text = f"–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ {number} {zna}"
                btns[button_text] = f"promo_{promocode.name}"
        else:
            btns["–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"] = "no_promo"

        keyboard = get_callback_btns2(btns=btns)

        await message.answer(
            f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —Ç–æ —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.\n–° –∫–∞–∂–¥–æ–π –µ–≥–æ –ø–æ–∫—É–ø–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –¥—ã–º–∫–æ–≤!\nüå´ –í–∞—à–∏ –¥—ã–º–∫–∏:  {bal}\n‚úâÔ∏è –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref}\n\nüõé –°—Å—ã–ª–∫–∞\n<code>https://t.me/{BOT_NICKNAME}?start={telegram_user_id}</code>",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª", url='https://t.me/smokyscreen')],
                    [types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='activate_start')]
                ]
            )
        )


@user_private_router.callback_query(lambda c: c.data.startswith('promo_'))
async def process_callback_promo(callback_query: types.CallbackQuery):
    promocode_name = callback_query.data.split('_')[1]
    await callback_query.message.answer(f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promocode_name}</code>", parse_mode="HTML")
    await callback_query.answer()


class FavouritesState(StatesGroup):
    choosing_taste = State()


def get_favourites_keyboard(btns: dict):
    builder = InlineKeyboardBuilder()
    for text, callback_data in btns.items():
        builder.button(text=text, callback_data=callback_data)
    return builder.as_markup()


@user_private_router.message(or_f(Command("favourites"), (F.text.lower() == "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è")))
async def favourites_cmd(message: types.Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id

    stmt = select(Favourite).filter(Favourite.user_id == user_id).options(selectinload(Favourite.product))
    result = await session.execute(stmt)
    favourites = result.scalars().all()

    if not favourites:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    tastes = set(favourite.product.taste for favourite in favourites)
    btns = {taste: f"taste_{taste}" for taste in tastes}

    await state.set_state(FavouritesState.choosing_taste)
    await message.answer(
        text="‚ù§Ô∏è  –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:",
        reply_markup=get_favourites_keyboard(btns=btns)
    )


@user_private_router.callback_query(F.data.startswith("taste_"), FavouritesState.choosing_taste)
async def taste_selected(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    taste = callback.data.split("_")[1]
    user_id = callback.from_user.id

    stmt = select(Favourite).join(Product).filter(
        Favourite.user_id == user_id,
        Product.taste == taste
    ).options(selectinload(Favourite.product))
    result = await session.execute(stmt)
    favourite = result.scalar()

    if not favourite:
        await callback.message.answer("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –≤–∫—É—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
        return

    product = favourite.product
    product_id = product.id

    keyboard = [
        [
            InlineKeyboardButton(text=f"{i} —à—Ç.", callback_data=f"buy_{product.id}_{i}")
            for i in range(1, 6)
        ],
        [
            InlineKeyboardButton(text=f"{i} —à—Ç.", callback_data=f"buy_{product.id}_{i}")
            for i in range(6, 11)
        ],
        [
            InlineKeyboardButton(text="–ë–æ–ª–µ–µ 10 —à—Ç.", callback_data="opt_")
        ],
        [
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"d_fav_{product.id}"),
            InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–∞—è", callback_data="activate_start")
        ],
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    stmt = select(Product.quantity).filter(Product.id == product_id)
    result = await session.execute(stmt)
    quantity_on_stock = result.scalar()
    if quantity_on_stock is None:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ.")
        await callback.answer()
        return
    if quantity_on_stock < 0:
        try:
            await bot.send_message(USER_ID, f"Warning: Product '{product.name}' has a quantity less than 0!")
        except Exception as e:
            logging.error(f"Failed to send message to admin: {e}")
    if quantity_on_stock < 1:
        nali = "–¢–æ–ª—å–∫–æ –ø–æ–¥ –∑–∞–∫–∞–∑"
    elif 0 < quantity_on_stock < 11:
        nali = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {quantity_on_stock}"
    else:
        nali = "–¢–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–µ"
    if product.image:
        await callback.message.answer_photo(
            photo=product.image,
            caption=f"<strong>üì¶ –¢–æ–≤–∞—Ä:</strong> {product.name}\n<strong>üòã –í–∫—É—Å:</strong> {product.taste}\n<strong>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {product.description}\n\n<strong>‚úÖ {nali}</strong>\n<strong>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {round(product.price, 2)}",
            reply_markup=reply_markup
        )
    else:
        await callback.message.answer(
            text=f"<strong>üì¶ –¢–æ–≤–∞—Ä:</strong> {product.name}\n<strong>üòã –í–∫—É—Å:</strong> {product.taste}\n<strong>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {product.description}\n\n<strong>‚úÖ {nali}</strong>\n<strong>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {round(product.price, 2)}",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    await callback.answer()
# @user_private_router.callback_query(F.data.startswith("taste_"), FavouritesState.choosing_taste)
# async def taste_selected(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     taste = callback.data.split("_")[1]
#     user_id = callback.from_user.id

#     stmt = select(Favourite).join(Product).filter(
#         Favourite.user_id == user_id,
#         Product.taste == taste,
#         Product.is_closed == False  # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
#     ).options(selectinload(Favourite.product))
#     result = await session.execute(stmt)
#     favourite = result.scalar()

#     if not favourite:
#         await callback.message.answer("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –≤–∫—É—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
#         return

#     product = favourite.product
#     product_id = product.id

#     keyboard = [
#         [
#             InlineKeyboardButton(text=f"{i} —à—Ç.", callback_data=f"buy_{product.id}_{i}")
#             for i in range(1, 6)
#         ],
#         [
#             InlineKeyboardButton(text=f"{i} —à—Ç.", callback_data=f"buy_{product.id}_{i}")
#             for i in range(6, 11)
#         ],
#         [
#             InlineKeyboardButton(text="–ë–æ–ª–µ–µ 10 —à—Ç.", callback_data="opt_")
#         ],
#         [
#             InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"d_fav_{product.id}"),
#             InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–∞—è", callback_data="activate_start")
#         ],
#     ]
#     reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
#     stmt = select(Product.quantity).filter(Product.id == product_id)
#     result = await session.execute(stmt)
#     quantity_on_stock = result.scalar()
#     if quantity_on_stock is None:
#         await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ.")
#         await callback.answer()
#         return
#     if quantity_on_stock < 0:
#         try:
#             await bot.send_message(USER_ID, f"Warning: Product '{product.name}' has a quantity less than 0!")
#         except Exception as e:
#             logging.error(f"Failed to send message to admin: {e}")
#     if quantity_on_stock < 1:
#         nali = "–¢–æ–ª—å–∫–æ –ø–æ–¥ –∑–∞–∫–∞–∑"
#     elif 0 < quantity_on_stock < 11:
#         nali = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {quantity_on_stock}"
#     else:
#         nali = "–¢–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–µ"
#     if product.image:
#         await callback.message.answer_photo(
#             photo=product.image,
#             caption=f"<strong>üì¶ –¢–æ–≤–∞—Ä:</strong> {product.name}\n<strong>üòã –í–∫—É—Å:</strong> {product.taste}\n<strong>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {product.description}\n\n<strong>‚úÖ {nali}</strong>\n<strong>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {round(product.price, 2)}",
#             reply_markup=reply_markup
#         )
#     else:
#         await callback.message.answer(
#             text=f"<strong>üì¶ –¢–æ–≤–∞—Ä:</strong> {product.name}\n<strong>üòã –í–∫—É—Å:</strong> {product.taste}\n<strong>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {product.description}\n\n<strong>‚úÖ {nali}</strong>\n<strong>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {round(product.price, 2)}",
#             reply_markup=reply_markup,
#             parse_mode="HTML"
#         )
#     await callback.answer()

def get_callback_btns2(*, btns: dict[str, str], sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))
    return keyboard.adjust(*sizes).as_markup()


@user_private_router.callback_query(F.data.startswith("izbra"))
async def izbra_selected(callback: types.CallbackQuery):
    await callback.message.answer("–≠—Ç–æ –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
    await callback.answer()


@user_private_router.callback_query(F.data.startswith("d_fav"))
async def delete_from_favourites(callback: types.CallbackQuery, session: AsyncSession):
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    stmt = delete(Favourite).where(Favourite.user_id == user_id, Favourite.product_id == product_id)
    await session.execute(stmt)
    await session.commit()

    await callback.message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
    await callback.answer()


@user_private_router.message(F.contact)
async def get_contact(message: types.Message):
    await message.answer(f"–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω")
    await message.answer(str(message.contact))


@user_private_router.message(F.location)
async def get_location(message: types.Message):
    await message.answer(f"–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(str(message.location))




def get_callback_btns2(*, btns: dict[str, str], sizes: tuple[int] = (1,)):
    keyboard = InlineKeyboardBuilder()
    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))
    return keyboard.adjust(*sizes).as_markup()


@user_private_router.message(F.text.lower() == "–∫—É–ø–∏—Ç—å üõí")
@user_private_router.message(Command("buy"))
async def buy_cmd(message: types.Message):
    is_subscribed = await check_subscription(message.from_user.id)
    if is_subscribed:
        await message.answer(
            text="üå¨Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–ñ–∏–¥–∫–æ—Å—Ç–∏", callback_data='vape e-juice'),
                        InlineKeyboardButton(text="–û–¥–Ω–æ—Ä–∞–∑–∫–∏", callback_data='odnorazki')
                    ],
                    [
                        InlineKeyboardButton(text="POD-—Å–∏—Å—Ç–µ–º—ã", callback_data='podiki'),
                        InlineKeyboardButton(text="–°–Ω—é—Å", callback_data='snus')
                    ]
                ]
            )
        )
    else:
        await message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª", url='https://t.me/smokyscreen')],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='activate_start')]
            ]
        ))


@user_private_router.callback_query(F.data.in_({"in_stock", "pre_order"}))
async def purchase_option_selected(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await state.update_data(purchase_option=callback.data)
    data = await state.get_data()
    category = data.get('category')
    categories = {
        "vape e-juice": 1,
        "odnorazki": 2,
        "podiki": 3,
        "snus": 4
    }
    category_id = categories.get(category)
    if category_id is None:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    purchase_option = data.get('purchase_option', 'in_stock')
    products = await orm_get_makers_by_category(category_id=category_id, session=session, in_stock=(purchase_option == 'in_stock'))
    btns = {product.maker: f"maker_{product.maker}" for product in products}
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=get_callback_btns2(btns=btns))


@user_private_router.callback_query(F.data.in_({"vape e-juice", "odnorazki", "podiki", "snus"}))
async def category_selected(callback: CallbackQuery, state: FSMContext):
    await state.update_data(category=callback.data)
    await callback.message.edit_text(
        text="üå¨Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data='in_stock')
                ],
                # [
                #     InlineKeyboardButton(text="–ü–æ–¥ –∑–∞–∫–∞–∑", callback_data='pre_order')
                # ]
            ]
        )
    )


@user_private_router.callback_query(F.data.startswith("maker_"))
async def maker_products(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    maker = callback.data.split("_")[1]
    data = await state.get_data()
    purchase_option = data.get('purchase_option', 'in_stock')
    products = await get_products_with_tastes(maker=maker, session=session, in_stock=(purchase_option == 'in_stock'))
    
    if not products:
        await callback.message.edit_text(f"–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è {maker}.")
        return
    
    btns = {f"{product.name} ({product.taste})": f"product_{product.id}" for product in products if product.quantity > 0}
    
    if not btns:
        await callback.message.edit_text(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è {maker}.")
        return
    
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=get_callback_btns2(btns=btns))

@user_private_router.callback_query(F.data.startswith("product_"))
async def product_details(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    product_id = int(callback.data.split("_")[1])
    product = await orm_get_product(session=session, product_id=product_id)
    
    if not product or product.is_closed:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –∏ –Ω–µ —Å–∫—Ä—ã—Ç –ª–∏ –æ–Ω
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        await callback.answer()
        return

    keyboard = [
        [
            InlineKeyboardButton(text=f"{i} —à—Ç.", callback_data=f"buy_{product.id}_{i}")
            for i in range(1, 6)
        ],
        [
            InlineKeyboardButton(text=f"{i} —à—Ç.", callback_data=f"buy_{product.id}_{i}")
            for i in range(6, 11)
        ],
        [
            InlineKeyboardButton(text="–ë–æ–ª–µ–µ 10 —à—Ç.", callback_data="opt_")
        ],
        [
            InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favourite_{product.id}")
        ],
        [
            InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–∞—è", callback_data="activate_start")
        ],
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    stmt = select(Product.quantity).filter(Product.id == product_id)
    result = await session.execute(stmt)
    quantity_on_stock = result.scalar()
    if quantity_on_stock is None:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ.")
        await callback.answer()
        return
    if quantity_on_stock < 0:
        try:
            await bot.send_message(USER_ID, f"Warning: Product '{product.name}' has a quantity less than 0!")
        except Exception as e:
            logging.error(f"Failed to send message to admin: {e}")
    if quantity_on_stock < 1:
        nali = "–¢–æ–ª—å–∫–æ –ø–æ–¥ –∑–∞–∫–∞–∑"
    elif 0 < quantity_on_stock < 11:
        nali = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {quantity_on_stock}"
    else:
        nali = "–¢–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–µ"
    if product.image:
        await callback.message.answer_photo(
            photo=product.image,
            caption=f"<strong>üì¶ –¢–æ–≤–∞—Ä:</strong> {product.name}\n<strong>üòã –í–∫—É—Å:</strong> {product.taste}\n<strong>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {product.description}\n\n<strong>‚úÖ {nali}</strong>\n<strong>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {round(product.price, 2)}",
            reply_markup=reply_markup
        )
    else:
        await callback.message.answer(
            text=f"<strong>üì¶ –¢–æ–≤–∞—Ä:</strong> {product.name}\n<strong>üòã –í–∫—É—Å:</strong> {product.taste}\n<strong>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {product.description}\n\n<strong>‚úÖ {nali}</strong>\n<strong>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {round(product.price, 2)}",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    await callback.answer()

@user_private_router.callback_query(F.data.startswith("buy_"))
async def add_to_cart(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    data = callback.data.split("_")
    product_id = int(data[1])
    quantity = int(data[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    stmt = select(Product).filter(Product.id == product_id)
    result = await session.execute(stmt)
    product = result.scalar()

    if not product:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_item = CartItem(user_id=callback.from_user.id, product_id=product_id, quantity=quantity, price_at_time=product.price)
    session.add(cart_item)
    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É
    await callback.message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
    await callback.message.answer(
        text="üå¨Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ñ–∏–¥–∫–æ—Å—Ç–∏", callback_data='vape e-juice'),
                    InlineKeyboardButton(text="–û–¥–Ω–æ—Ä–∞–∑–∫–∏", callback_data='odnorazki')
                ],
                [
                    InlineKeyboardButton(text="POD-—Å–∏—Å—Ç–µ–º—ã", callback_data='podiki'),
                    InlineKeyboardButton(text="–°–Ω—é—Å", callback_data='snus')
                ]
            ]
        )
    )
    await callback.answer()

@user_private_router.callback_query(F.data.startswith("favourite_"))
async def add_to_favourites(callback: CallbackQuery, session: AsyncSession):
    product_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    stmt = select(Favourite).filter(Favourite.user_id == user_id, Favourite.product_id == product_id)
    result = await session.execute(stmt)
    existing_favourite = result.scalar()
    if existing_favourite:
        await callback.message.answer("–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
    else:
        favourite = Favourite(user_id=user_id, product_id=product_id)
        session.add(favourite)
        await session.commit()
        await callback.message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    await callback.answer()


@user_private_router.callback_query(F.data.startswith("opt_"))
async def opt_product(callback: CallbackQuery):
    await callback.message.answer("–î–ª—è –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª–µ–µ 10 –µ–¥–∏–Ω–∏—Ü —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º - @SmokyScreenShop | –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã 10:00-22:00 ")
    await callback.answer()


# @user_private_router.callback_query(F.data.startswith("buy_"))
# async def buy_product(callback: CallbackQuery, bot: Bot, session: AsyncSession):
#     data = callback.data.split("_")
#     product_id = int(data[1])
#     quantity = int(data[2])

#     stmt = select(Product.quantity).filter(Product.id == product_id)
#     result = await session.execute(stmt)
#     quantity_on_stock = result.scalar()

#     if quantity_on_stock is None:
#         await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ.")
#         await callback.answer()
#         return

#     product = await orm_get_product(session, product_id=product_id)
#     if product:
#         total_price = product.price * quantity
#         keyboard = [
#             [
#                 InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data=f"pickup_{product_id}_{quantity}_{total_price}_{product.name}"),
#             ],
#             [
#                 (InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞", callback_data=f"delivery_{product_id}_{quantity}_{total_price}_{product.name}"))
#             ]
#         ]
#         reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

#         if quantity > quantity_on_stock:
#             await callback.message.answer(
#                 f"–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ç–æ–≤–∞—Ä –≤ —Ç—Ä–µ–±—É–µ–º–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –Ω–∞—à–µ–º —Å–∫–ª–∞–¥–µ. –ù–∞ —Å–∫–ª–∞–¥–µ {quantity_on_stock} —à—Ç.\n–ú—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—à –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä –ø–æ—Å—Ç—É–ø–∏—Ç –∫ –Ω–∞–º –Ω–∞ —Å–∫–ª–∞–¥.\n–í–æ–∑–º–æ–∂–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:",
#                 reply_markup=reply_markup
#             )
#         else:
#             await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:", reply_markup=reply_markup)

#     await callback.answer()


# class DeliveryState(StatesGroup):
#     waiting_for_pickup_datetime = State()
#     waiting_for_datetime = State()
#     waiting_for_payment_method = State()
#     waiting_for_promo_code = State()
#     waiting_for_user_confirmation = State()


# @user_private_router.callback_query(F.data.startswith("pickup_"))
# async def pickup_product(callback: CallbackQuery, state: FSMContext):
#     data = callback.data.split("_")
#     if len(data) < 5:
#         await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
#         return
    
#     product_id = int(data[1])
#     quantity = int(data[2])
#     total_price = int(float(data[3]))
#     name = data[4]
    
#     total_price_with_fee = int(total_price)
    
#     payload = f"–°_{product_id}_{quantity}_{total_price_with_fee}_{name}"
#     address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
#     await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.\n\n–í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å 10:00 –¥–æ 20:00.")
    
#     await state.update_data(product_id=product_id, quantity=quantity, total_price=total_price_with_fee, name=name, payload=payload, address=address)
    
#     await state.set_state(DeliveryState.waiting_for_pickup_datetime)
#     await callback.answer()


# @user_private_router.message(StateFilter(DeliveryState.waiting_for_pickup_datetime))
# async def pickup_datetime_received(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
#     datetime_str = message.text
#     try:
#         pickup_datetime = datetime.datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
#     except ValueError:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
#         return
    
#     current_time = datetime.datetime.now()
#     if pickup_datetime <= current_time:
#         await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
#         return
    
#     if not (10 <= pickup_datetime.hour < 22):
#         await message.answer("–í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å 10:00 –¥–æ 20:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
#         return
    
#     data = await state.get_data()
#     product_id = data['product_id']
#     quantity = data['quantity']
#     total_price = data['total_price']
#     name = data['name']
#     payload = data['payload']
#     address = data['address']
    
#     await state.update_data(pickup_datetime=pickup_datetime)
    
#     await message.answer("–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞\n–í–µ–ª–∏—Ç - –æ—Ñ–∏—Å–Ω—ã–π  —Ü–µ–Ω—Ç—Ä\n–£–ª–∏—Ü–∞ 40 –ª–µ—Ç –ü–æ–±–µ–¥—ã, 26")
    
#     try:
#         await bot.send_location(chat_id=message.chat.id, latitude=OFFICE_COORDS[0], longitude=OFFICE_COORDS[1])
#     except TelegramError as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: {e}")
    
#     stmt = select(Product.quantity).filter(Product.id == product_id)
#     result = await session.execute(stmt)
#     quantity_on_stock = result.scalar()
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–Æ–ö–∞—Å—Å–∞", callback_data="payment_yookassa")],
#         [InlineKeyboardButton(text="–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data="payment_na_meste")],
#         [InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥", callback_data="payment_promo")],
#     ])
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
#     await state.set_state(DeliveryState.waiting_for_payment_method)


# @user_private_router.callback_query(F.data.startswith("delivery_"))
# async def delivery_product(callback: CallbackQuery, bot: Bot):
#     data = callback.data.split("_")
#     if len(data) < 5:
#         await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
#         return
    
#     product_id = int(data[1])
#     quantity = int(data[2])
#     total_price = int(float(data[3]))
#     name = data[4]
    
#     keyboard = [
#         [
#             InlineKeyboardButton(text="–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∏–π", callback_data=f"avto_{product_id}_{quantity}_{total_price}_{name}"),
#             InlineKeyboardButton(text="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data=f"centr_{product_id}_{quantity}_{total_price}_{name}"),
#         ],
#         [
#             InlineKeyboardButton(text="–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π", callback_data=f"komsomol_{product_id}_{quantity}_{total_price}_{name}"),
#             InlineKeyboardButton(text="–®–ª—é–∑–æ–≤–æ–π", callback_data=f"shlyuz_{product_id}_{quantity}_{total_price}_{name}")
#         ]
#     ]
#     reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
#     await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:", reply_markup=reply_markup)
#     await callback.answer()


# @user_private_router.callback_query(F.data.startswith(("avto_", "centr_", "komsomol_", "shlyuz_")))
# async def district_selected(callback: CallbackQuery, state: FSMContext):
#     data = callback.data.split("_")
#     if len(data) < 5:
#         await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
#         return
    
#     district = data[0]
#     product_id = int(data[1])
#     quantity = int(data[2])
#     total_price = int(float(data[3]))
#     name = data[4]
    
#     await state.update_data(product_id=product_id, quantity=quantity, total_price=total_price, name=name, district=district, address="–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", payload="")  # –î–æ–±–∞–≤–ª—è–µ–º payload
#     await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∂–µ–ª–∞–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.\n\n–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å 10:00 –¥–æ 20:00.")
#     await state.set_state(DeliveryState.waiting_for_datetime)
#     await callback.answer()



# @user_private_router.message(StateFilter(DeliveryState.waiting_for_datetime))
# async def datetime_received(message: Message, state: FSMContext, session: AsyncSession):
#     datetime_str = message.text
#     try:
#         delivery_datetime = datetime.datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
#     except ValueError:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
#         return
    
#     current_time = datetime.datetime.now()
#     if delivery_datetime <= current_time:
#         await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
#         return
    
#     if not (10 <= delivery_datetime.hour < 22):
#         await message.answer("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å 10:00 –¥–æ 20:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
#         return

#     if (delivery_datetime - current_time).total_seconds() < 3 * 3600:
#         await message.answer("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
#         return

#     data = await state.get_data()
#     product_id = data['product_id']
#     quantity = data['quantity']
#     total_price = data['total_price']
#     name = data['name']
#     district = data['district']

#     await state.update_data(delivery_datetime=delivery_datetime)
#     stmt = select(Product.quantity).filter(Product.id == product_id)
#     result = await session.execute(stmt)
#     quantity_on_stock = result.scalar()
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–Æ–ö–∞—Å—Å–∞", callback_data="payment_yookassa")],
#         [InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥", callback_data="payment_promo")],
#     ])
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
#     await state.set_state(DeliveryState.waiting_for_payment_method)




# @user_private_router.callback_query(F.data == "payment_na_meste", StateFilter(DeliveryState.waiting_for_payment_method))
# async def payment_na_meste_selected(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     user_id = callback.from_user.id
#     product_id = data['product_id']
#     quantity = data['quantity']
#     total_price = data['total_price']
#     name = data['name']
#     address = data['address']
#     pickup_datetime = data.get('pickup_datetime')
#     delivery_datetime = data.get('delivery_datetime')
#     order_id = generate_order_id()

#     await state.update_data(order_id=order_id)

#     await callback.message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n"
#                                   f"–¢–æ–≤–∞—Ä: {name}\n"
#                                   f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
#                                   f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.\n"
#                                   f"–ê–¥—Ä–µ—Å: {address}\n"
#                                   f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_datetime or delivery_datetime}\n"
#                                   f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '–î–∞'.")

#     await state.set_state(DeliveryState.waiting_for_user_confirmation)
#     await callback.answer()


# @user_private_router.message(StateFilter(DeliveryState.waiting_for_user_confirmation))
# async def user_confirmation_received(message: Message, state: FSMContext, session: AsyncSession):
#     if message.text.lower() == "–¥–∞":
#         data = await state.get_data()
#         order_id = data['order_id']
#         user_id = message.from_user.id
#         product_id = data['product_id']
#         quantity = data['quantity']
#         total_price = data['total_price']
#         name = data['name']
#         address = data['address']
#         pickup_datetime = data.get('pickup_datetime')
#         delivery_datetime = data.get('delivery_datetime')

#         stmt = select(User).where(User.user_id == user_id)
#         result = await session.execute(stmt)
#         user = result.scalar_one_or_none()
#         referrer_id = user.referrer_id if user else None

#         product = await orm_get_product(session, product_id)
#         if not product:
#             await message.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#             return

#         new_order = Order(
#             product_id=product_id,
#             price=total_price,
#             quantity=quantity,
#             name=name,
#             maker=product.maker,
#             taste=data.get('taste', ''),
#             user_id=user_id,
#             referrer_id=referrer_id,
#             order_number=order_id,
#             payment_status="–ù–µ –æ–ø–ª–∞—á–µ–Ω",
#             order_status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
#         )

#         session.add(new_order)
#         await session.commit()

#         await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ (ID: {order_id}) –ø—Ä–∏–Ω—è—Ç. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.")

#         msg_ad = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ–ø–ª–∞—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ!\n"
#                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
#                   f"–¢–æ–≤–∞—Ä: {name}\n"
#                   f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
#                   f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.\n"
#                   f"–ê–¥—Ä–µ—Å: {address}\n"
#                   f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_datetime or delivery_datetime}")

#         await bot.send_message(USER_ID, msg_ad)

#         try:
#             await update_product_quantity(session, product_id, quantity)
#             # await update_user_spent(session, user_id, total_price)
#         except ValueError as e:
#             await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

#         await state.clear()
#     else:
#         await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# def calculate_delivery_cost(district, total_price_in_kopecks):
#     total_price = total_price_in_kopecks / 100  # –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä—É–±–ª–∏
#     delivery_cost = 0

#     if district == "avto":
#         if total_price < 1000:
#             delivery_cost = 5000  # 50 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
#     elif district == "centr":
#         if total_price < 2000:
#             delivery_cost = 10000  # 100 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
#     elif district == "komsomol":
#         if total_price < 3000:
#             delivery_cost = 15000  # 150 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
#     elif district == "shlyuz":
#         if total_price < 3500:
#             delivery_cost = 17500  # 175 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö

#     return delivery_cost

# @user_private_router.callback_query(F.data == "payment_yookassa", StateFilter(DeliveryState.waiting_for_payment_method))
# async def payment_yookassa_selected(callback: CallbackQuery, state: FSMContext, bot: Bot):
#     data = await state.get_data()
#     product_id = data['product_id']
#     quantity = data['quantity']
#     total_price = data['total_price']
#     name = data['name']
#     address = data.get('address', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
#     pickup_datetime = data.get('pickup_datetime')
#     delivery_datetime = data.get('delivery_datetime')
#     promo_code = data.get('promo_code', '')

#     method = "–°" if pickup_datetime else "–î"
#     datetime_str = pickup_datetime.strftime('%d%m%Y%H%M') if pickup_datetime else delivery_datetime.strftime('%d%m%Y%H%M')
#     payload = f"{method}_{product_id}_{quantity}_{total_price}_{name}_{address}_{datetime_str}_{promo_code}"
    
#     if len(payload) > 128:
#         payload = payload[:128]
    
#     logging.info(f"Payload: {payload}")

#     await order(callback.message, bot, total_price, name, payload, address, pickup_datetime or delivery_datetime, promo_code)
#     await callback.answer


# @user_private_router.callback_query(F.data.startswith("payment_promo"), StateFilter(DeliveryState.waiting_for_payment_method))
# async def payment_method_selected(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
#     await state.set_state(DeliveryState.waiting_for_promo_code)
#     await callback.answer()


# @user_private_router.message(StateFilter(DeliveryState.waiting_for_promo_code))
# async def promo_code_received(message: Message, state: FSMContext, session: AsyncSession):
#     promo_code = message.text
#     data = await state.get_data()
#     total_price = data['total_price']
#     name = data['name']
#     address = data['address']
#     pickup_datetime = data.get('pickup_datetime')
#     delivery_datetime = data.get('delivery_datetime')
    
#     success, new_total_price = await activate_promo_code(session, promo_code, total_price)
#     if success:
#         await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω. –ù–æ–≤–∞—è —Å—É–º–º–∞: {new_total_price} —Ä—É–±.")
#     else:
#         await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
#     method = "–°" if pickup_datetime else "–î"
#     datetime_str = pickup_datetime.strftime('%d%m%Y%H%M') if pickup_datetime else delivery_datetime.strftime('%d%m%Y%H%M')
#     payload = f"{method}_{data['product_id']}_{data['quantity']}_{new_total_price}_{name}_{address}_{datetime_str}_{promo_code}"
    
#     await state.update_data(total_price=new_total_price, payload=payload)
#     await order(message, bot, new_total_price, name, payload, address, pickup_datetime or delivery_datetime, promo_code)
#     await state.set_state(DeliveryState.waiting_for_payment_method)


# async def activate_promo_code(session: AsyncSession, promo_code: str, total_price: int) -> tuple[bool, int]:
#     stmt = select(Promocode).filter(Promocode.name == promo_code)
#     result = await session.execute(stmt)
#     promo = result.scalar_one_or_none()
    
#     if promo:
#         if promo.discount_type == 'PERCENT':
#             discount = total_price * (promo.discount_amount / 100)
#         else:
#             discount = promo.discount_amount
#         total_price -= discount
#         await delete_promo_code(session, promo_code)
#         return True, total_price
#     else:
#         return False, total_price


# async def order(message: Message, bot: Bot, price, name, payload, address, delivery_datetime, promo_code):
#     try:
#         total_price_in_kopecks = int(price * 100)
        
#         method = payload.split("_")[0]
#         need_shipping_address = method == "–î"

#         delivery_cost = 0
#         if method == "–î":
#             parts = payload.split("_")
#             if len(parts) < 6:
#                 await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ payload")
#                 return
#             district = parts[5]
#             delivery_cost = calculate_delivery_cost(district, total_price_in_kopecks)

#         prices = [
#             LabeledPrice(label=name, amount=total_price_in_kopecks),
#             LabeledPrice(label="–ö–æ–º–∏—Å—Å–∏—è", amount=int(total_price_in_kopecks * 0.03))
#         ]

#         if method == "–î" and delivery_cost > 0:
#             prices.append(LabeledPrice(label="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏", amount=delivery_cost))

#         await bot.send_invoice(
#             chat_id=message.chat.id,
#             title=name[:32],
#             description=f"–ó–∞–∫–∞–∑: {name[:255]}\n\n–í—Ä–µ–º—è: {delivery_datetime.strftime('%d.%m.%Y %H:%M')}",
#             payload=payload,
#             provider_token="381764678:TEST:91259",
#             currency="RUB",
#             prices=prices,
#             max_tip_amount=500000,
#             suggested_tip_amounts=[2500, 5000, 10000, 15000],
#             start_parameter="12331232",
#             provider_data=None,
#             photo_url="",
#             photo_size=200,
#             photo_height=200,
#             photo_width=200,
#             need_name=True,
#             need_phone_number=True,
#             need_email=False,
#             need_shipping_address=need_shipping_address,
#             send_phone_number_to_provider=False,
#             send_email_to_provider=False,
#             is_flexible=False,
#             disable_notification=False,
#             protect_content=False,
#             reply_to_message_id=None,
#             allow_sending_without_reply=True,
#             reply_markup=None,
#             request_timeout=60
#         )

#     except Exception as e:
#         await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")


# @user_private_router.pre_checkout_query()
# async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
#     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# def generate_order_id():
#     timestamp = datetime.datetime.now().strftime("%Y%m%d") 
#     random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))  
#     order_id = f"ORD-{timestamp}-{random_part}"
#     return order_id


# @user_private_router.message(F.content_type == "successful_payment")
# async def successful_payment(message: Message, state: FSMContext, session: AsyncSession):
#     total_amount = message.successful_payment.total_amount // 100
#     currency = message.successful_payment.currency
#     payload = message.successful_payment.invoice_payload
#     logging.info(f"Payload: {payload}")
#     parts = payload.split("_")
#     if len(parts) >= 8:
#         method = parts[0]
#         product_id = int(parts[1])
#         quantity = int(parts[2])
#         total_price = int(float(parts[3]))
#         name = parts[4]
#         address = parts[5]
#         delivery_datetime_str = parts[6]
#         promo_code = parts[7]
#         try:
#             delivery_datetime = datetime.datetime.strptime(delivery_datetime_str, '%d%m%Y%H%M')
#         except ValueError:
#             delivery_datetime = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#     else:
#         method = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#         quantity = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#         total_price = total_amount
#         name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#         address = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#         delivery_datetime = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#         promo_code = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

#     order_info = message.successful_payment.order_info
#     user_name = order_info.name if order_info else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#     user_phone = order_info.phone_number if order_info else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#     user_address = order_info.shipping_address.street_line1 if order_info and order_info.shipping_address else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

#     order_id = generate_order_id()
#     msg = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! ‚ù§Ô∏è\n–í–∞—à —Ç–æ–≤–∞—Ä: <b>{name}</b>!\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order_id}</b>.\n–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: <b>{total_amount} {currency}</b>\n\n–ê–∫–∫–∞—É–Ω—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - <b>@SmokyScreenShop</b> | –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã 10:00-22:00"
#     await message.answer(msg, parse_mode="HTML")

#     if method == "–°":
#         msg_ad = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order_id}</b>\n–¢–æ–≤–∞—Ä: <b>{name}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity}</b>\n"
#                   f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{total_amount} {currency}</b>\n–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: —Å–∞–º–æ–≤—ã–≤–æ–∑\n"
#                   f"–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: <b>{address}</b>\n–í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: <b>{delivery_datetime}</b>\n"
#                   f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: <b>{user_name}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>{user_phone}</b>")
#     else:
#         msg_ad = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order_id}</b>\n–¢–æ–≤–∞—Ä: <b>{name}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity}</b>\n"
#                   f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{total_amount} {currency}</b>\n–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: –¥–æ—Å—Ç–∞–≤–∫–∞\n"
#                   f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{user_address}</b>\n–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{delivery_datetime}</b>\n"
#                   f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: <b>{user_name}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>{user_phone}</b>")

#     await bot.send_message(USER_ID, msg_ad, parse_mode="HTML")

#     user_id = message.from_user.id
#     stmt = select(User).where(User.user_id == user_id)
#     result = await session.execute(stmt)
#     user = result.scalar_one_or_none()
#     referrer_id = user.referrer_id if user else None

#     product = await orm_get_product(session, product_id)
#     if not product:
#         await message.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#         return

#     new_order = Order(
#         product_id=product_id,
#         price=total_price,
#         quantity=quantity,
#         name=name,
#         maker=product.maker,
#         taste=promo_code,
#         user_id=user_id,
#         referrer_id=referrer_id,
#         order_number=order_id,
#         payment_status="–û–ø–ª–∞—á–µ–Ω",
#         order_status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
#     )

#     session.add(new_order)
#     await session.commit()

#     try:
#         await update_product_quantity(session, product_id, quantity)
#         # await update_user_spent(session, user_id, total_amount)
#     except ValueError as e:
#         # await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
#         pass

#     await delete_promo_code(session, promo_code)





class DeliveryState(StatesGroup):
    waiting_for_pickup_datetime = State()
    waiting_for_datetime = State()
    waiting_for_user_confirmation = State()

@user_private_router.callback_query(F.data.startswith("product_"))
async def product_details(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    product_id = int(callback.data.split("_")[1])
    product = await orm_get_product(session=session, product_id=product_id)
    
    if not product or product.is_closed:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –∏ –Ω–µ —Å–∫—Ä—ã—Ç –ª–∏ –æ–Ω
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        await callback.answer()
        return

    keyboard = [
        [
            InlineKeyboardButton(text=f"{i} —à—Ç.", callback_data=f"buy_{product.id}_{i}")
            for i in range(1, 6)
        ],
        [
            InlineKeyboardButton(text=f"{i} —à—Ç.", callback_data=f"buy_{product.id}_{i}")
            for i in range(6, 11)
        ],
        [
            InlineKeyboardButton(text="–ë–æ–ª–µ–µ 10 —à—Ç.", callback_data="opt_")
        ],
        [
            InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favourite_{product.id}")
        ],
        [
            InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–∞—è", callback_data="activate_start")
        ],
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    stmt = select(Product.quantity).filter(Product.id == product_id)
    result = await session.execute(stmt)
    quantity_on_stock = result.scalar()
    if quantity_on_stock is None:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ.")
        await callback.answer()
        return
    if quantity_on_stock < 0:
        try:
            await bot.send_message(USER_ID, f"Warning: Product '{product.name}' has a quantity less than 0!")
        except Exception as e:
            logging.error(f"Failed to send message to admin: {e}")
    if quantity_on_stock < 1:
        nali = "–¢–æ–ª—å–∫–æ –ø–æ–¥ –∑–∞–∫–∞–∑"
    elif 0 < quantity_on_stock < 11:
        nali = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {quantity_on_stock}"
    else:
        nali = "–¢–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–µ"
    if product.image:
        await callback.message.answer_photo(
            photo=product.image,
            caption=f"<strong>üì¶ –¢–æ–≤–∞—Ä:</strong> {product.name}\n<strong>üòã –í–∫—É—Å:</strong> {product.taste}\n<strong>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {product.description}\n\n<strong>‚úÖ {nali}</strong>\n<strong>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {round(product.price, 2)}",
            reply_markup=reply_markup
        )
    else:
        await callback.message.answer(
            text=f"<strong>üì¶ –¢–æ–≤–∞—Ä:</strong> {product.name}\n<strong>üòã –í–∫—É—Å:</strong> {product.taste}\n<strong>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {product.description}\n\n<strong>‚úÖ {nali}</strong>\n<strong>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {round(product.price, 2)}",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    await callback.answer()

@user_private_router.callback_query(F.data.startswith("buy_"))
async def add_to_cart(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    data = callback.data.split("_")
    product_id = int(data[1])
    quantity = int(data[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    stmt = select(Product).filter(Product.id == product_id)
    result = await session.execute(stmt)
    product = result.scalar()

    if not product:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_item = CartItem(user_id=callback.from_user.id, product_id=product_id, quantity=quantity, price_at_time=product.price)
    session.add(cart_item)
    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É
    await callback.message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
    await callback.message.answer(
        text="üå¨Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ñ–∏–¥–∫–æ—Å—Ç–∏", callback_data='vape e-juice'),
                    InlineKeyboardButton(text="–û–¥–Ω–æ—Ä–∞–∑–∫–∏", callback_data='odnorazki')
                ],
                [
                    InlineKeyboardButton(text="POD-—Å–∏—Å—Ç–µ–º—ã", callback_data='podiki'),
                    InlineKeyboardButton(text="–°–Ω—é—Å", callback_data='snus')
                ]
            ]
        )
    )
    await callback.answer()

# @user_private_router.message(F.text.lower() == "–∫—É–ø–∏—Ç—å üõí")
# @user_private_router.message(Command("buy"))
# async def buy_cmd(message: types.Message):
#     is_subscribed = await check_subscription(message.from_user.id)
#     if is_subscribed:
#         await message.answer(
#             text="üå¨Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
#             reply_markup=InlineKeyboardMarkup(
#                 inline_keyboard=[
#                     [
#                         InlineKeyboardButton(text="–ñ–∏–¥–∫–æ—Å—Ç–∏", callback_data='vape e-juice'),
#                         InlineKeyboardButton(text="–û–¥–Ω–æ—Ä–∞–∑–∫–∏", callback_data='odnorazki')
#                     ],
#                     [
#                         InlineKeyboardButton(text="POD-—Å–∏—Å—Ç–µ–º—ã", callback_data='podiki'),
#                         InlineKeyboardButton(text="–°–Ω—é—Å", callback_data='snus')
#                     ]
#                 ]
#             )
#         )
#     else:
#         await message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª", url='https://t.me/smokyscreen')],
#                 [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='activate_start')]
#             ]
#         ))

# @user_private_router.message(F.text.lower() == "–∫–æ—Ä–∑–∏–Ω–∞ üõí")
# @user_private_router.message(Command("cart"))
# async def view_cart(message: types.Message, session: AsyncSession):
#     user_id = message.from_user.id
#     stmt = select(CartItem).options(selectinload(CartItem.product)).filter(CartItem.user_id == user_id)
#     result = await session.execute(stmt)
#     cart_items = result.scalars().all()

#     if not cart_items:
#         await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
#         return

#     cart_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
#     total_price = 0

#     for item in cart_items:
#         product = item.product
#         item_total_price = item.quantity * item.price_at_time
#         cart_text += f"{product.name} - {item.quantity} —à—Ç. - {item_total_price} —Ä—É–±.\n"
#         total_price += item_total_price

#     cart_text += f"\n–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±."

#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [
#                 InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
#                 InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
#             ]
#         ]
#     )

#     await message.answer(cart_text, reply_markup=keyboard)

# @user_private_router.callback_query(F.data == "clear_cart")
# async def clear_cart(callback: CallbackQuery, session: AsyncSession):
#     user_id = callback.from_user.id
#     stmt = delete(CartItem).where(CartItem.user_id == user_id)
#     await session.execute(stmt)
#     await session.commit()

#     await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
#     await callback.answer()

# @user_private_router.callback_query(F.data == "checkout")
# async def checkout(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
#     user_id = callback.from_user.id
#     stmt = select(CartItem).options(selectinload(CartItem.product)).filter(CartItem.user_id == user_id)
#     result = await session.execute(stmt)
#     cart_items = result.scalars().all()

#     if not cart_items:
#         await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
#         await callback.answer()
#         return

#     total_price = sum(item.quantity * item.price_at_time for item in cart_items)
#     product_id = cart_items[0].product_id  # Assuming only one product for simplicity
#     quantity = cart_items[0].quantity
#     name = cart_items[0].product.name
#     address = "–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞\n–í–µ–ª–∏—Ç - –æ—Ñ–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä\n–£–ª–∏—Ü–∞ 40 –ª–µ—Ç –ü–æ–±–µ–¥—ã, 26"

#     await state.update_data(
#         product_id=product_id,
#         quantity=quantity,
#         total_price=total_price,
#         name=name,
#         address=address
#     )

#     await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=InlineKeyboardMarkup(
#         inline_keyboard=[
#             [
#                 InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="pickup"),
#                 InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery")
#             ]
#         ]
#     ))
#     await state.set_state(DeliveryState.waiting_for_pickup_datetime)
#     await callback.answer()

# @user_private_router.callback_query(F.data == "pickup")
# async def pickup_selected(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.\n\n–í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å 10:00 –¥–æ 20:00.")
#     await state.set_state(DeliveryState.waiting_for_pickup_datetime)
#     await callback.answer()

# @user_private_router.callback_query(F.data == "delivery")
# async def delivery_selected(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.\n\n–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å 10:00 –¥–æ 20:00.")
#     await state.set_state(DeliveryState.waiting_for_datetime)
#     await callback.answer()

# @user_private_router.message(StateFilter(DeliveryState.waiting_for_pickup_datetime))
# async def pickup_datetime_received(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
#     datetime_str = message.text
#     try:
#         pickup_datetime = datetime.datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
#     except ValueError:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
#         return

#     current_time = datetime.datetime.now()
#     if pickup_datetime <= current_time:
#         await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
#         return

#     if not (10 <= pickup_datetime.hour < 22):
#         await message.answer("–í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å 10:00 –¥–æ 20:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
#         return

#     await state.update_data(pickup_datetime=pickup_datetime)
#     await message.answer("–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞\n–í–µ–ª–∏—Ç - –æ—Ñ–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä\n–£–ª–∏—Ü–∞ 40 –ª–µ—Ç –ü–æ–±–µ–¥—ã, 26")

#     try:
#         await bot.send_location(chat_id=message.chat.id, latitude=OFFICE_COORDS[0], longitude=OFFICE_COORDS[1])
#     except TelegramError as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: {e}")

#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data="payment_na_meste")],
#     ]))
#     await state.set_state(DeliveryState.waiting_for_user_confirmation)

# @user_private_router.message(StateFilter(DeliveryState.waiting_for_datetime))
# async def delivery_datetime_received(message: Message, state: FSMContext, session: AsyncSession):
#     datetime_str = message.text
#     try:
#         delivery_datetime = datetime.datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
#     except ValueError:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
#         return

#     current_time = datetime.datetime.now()
#     if delivery_datetime <= current_time:
#         await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
#         return

#     if not (10 <= delivery_datetime.hour < 22):
#         await message.answer("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å 10:00 –¥–æ 20:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
#         return

#     if (delivery_datetime - current_time).total_seconds() < 3 * 3600:
#         await message.answer("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
#         return

#     await state.update_data(delivery_datetime=delivery_datetime)
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data="payment_na_meste")],
#     ]))
#     await state.set_state(DeliveryState.waiting_for_user_confirmation)

# @user_private_router.callback_query(F.data == "payment_na_meste", StateFilter(DeliveryState.waiting_for_user_confirmation))
# async def payment_na_meste_selected(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     logging.info(f"Data from state: {data}")
#     if 'product_id' not in data or 'quantity' not in data or 'total_price' not in data or 'name' not in data or 'address' not in data:
#         await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         await state.clear()
#         await callback.answer()
#         return

#     user_id = callback.from_user.id
#     product_id = data['product_id']
#     quantity = data['quantity']
#     total_price = data['total_price']
#     name = data['name']
#     address = data['address']
#     pickup_datetime = data.get('pickup_datetime')
#     delivery_datetime = data.get('delivery_datetime')
#     order_id = generate_order_id()

#     await state.update_data(order_id=order_id)

#     await callback.message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n"
#                                   f"–¢–æ–≤–∞—Ä: {name}\n"
#                                   f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
#                                   f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.\n"
#                                   f"–ê–¥—Ä–µ—Å: {address}\n"
#                                   f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_datetime or delivery_datetime}\n"
#                                   f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '–î–∞'.")

#     await state.set_state(DeliveryState.waiting_for_user_confirmation)
#     await callback.answer()

# @user_private_router.message(StateFilter(DeliveryState.waiting_for_user_confirmation))
# async def user_confirmation_received(message: Message, state: FSMContext, session: AsyncSession):
#     if message.text.lower() == "–¥–∞":
#         data = await state.get_data()
#         order_id = data['order_id']
#         user_id = message.from_user.id
#         product_id = data['product_id']
#         quantity = data['quantity']
#         total_price = data['total_price']
#         name = data['name']
#         address = data['address']
#         pickup_datetime = data.get('pickup_datetime')
#         delivery_datetime = data.get('delivery_datetime')

#         stmt = select(User).where(User.user_id == user_id)
#         result = await session.execute(stmt)
#         user = result.scalar_one_or_none()
#         referrer_id = user.referrer_id if user else None

#         product = await orm_get_product(session, product_id)
#         if not product:
#             await message.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#             return

#         new_order = Order(
#             product_id=product_id,
#             price=total_price,
#             quantity=quantity,
#             name=name,
#             maker=product.maker,
#             taste=data.get('taste', ''),
#             user_id=user_id,
#             referrer_id=referrer_id,
#             order_number=order_id,
#             payment_status="–ù–µ –æ–ø–ª–∞—á–µ–Ω",
#             order_status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
#         )

#         session.add(new_order)
#         await session.commit()

#         await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ (ID: {order_id}) –ø—Ä–∏–Ω—è—Ç. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.")

#         msg_ad = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ–ø–ª–∞—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ!\n"
#                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
#                   f"–¢–æ–≤–∞—Ä: {name}\n"
#                   f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
#                   f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.\n"
#                   f"–ê–¥—Ä–µ—Å: {address}\n"
#                   f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_datetime or delivery_datetime}")

#         await bot.send_message(USER_ID, msg_ad)

#         try:
#             await update_product_quantity(session, product_id, quantity)
#             # await update_user_spent(session, user_id, total_price)
#         except ValueError as e:
#             await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

#         await state.clear()
#     else:
#         await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# def generate_order_id():
#     timestamp = datetime.datetime.now().strftime("%Y%m%d") 
#     random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))  
#     order_id = f"ORD-{timestamp}-{random_part}"
#     return order_id



# @user_private_router.message(F.text.lower() == "–∫–æ—Ä–∑–∏–Ω–∞ üõí")
# @user_private_router.message(Command("cart"))
# async def view_cart(message: types.Message, session: AsyncSession):
#     user_id = message.from_user.id
#     stmt = select(CartItem).options(selectinload(CartItem.product)).filter(CartItem.user_id == user_id)
#     result = await session.execute(stmt)
#     cart_items = result.scalars().all()

#     if not cart_items:
#         await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
#         return

#     cart_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
#     total_price = 0
#     grouped_items = defaultdict(lambda: {"quantity": 0, "total_price": 0})

#     for item in cart_items:
#         product = item.product
#         item_total_price = item.quantity * item.price_at_time
#         grouped_items[product.id]["quantity"] += item.quantity
#         grouped_items[product.id]["total_price"] += item_total_price
#         total_price += item_total_price

#     for product_id, details in grouped_items.items():
#         product = next(item.product for item in cart_items if item.product.id == product_id)
#         cart_text += f"{product.name} - {details['quantity']} —à—Ç. - {details['total_price']} —Ä—É–±.\n"

#     cart_text += f"\n–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±."

#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [
#                 InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
#                 InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
#             ]
#         ]
#     )

#     await message.answer(cart_text, reply_markup=keyboard)

# @user_private_router.callback_query(F.data == "clear_cart")
# async def clear_cart(callback: CallbackQuery, session: AsyncSession):
#     user_id = callback.from_user.id
#     stmt = delete(CartItem).where(CartItem.user_id == user_id)
#     await session.execute(stmt)
#     await session.commit()

#     await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
#     await callback.answer()

# @user_private_router.callback_query(F.data == "checkout")
# async def checkout(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
#     user_id = callback.from_user.id
#     stmt = select(CartItem).options(selectinload(CartItem.product)).filter(CartItem.user_id == user_id)
#     result = await session.execute(stmt)
#     cart_items = result.scalars().all()

#     if not cart_items:
#         await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
#         await callback.answer()
#         return

#     total_price = sum(item.quantity * item.price_at_time for item in cart_items)
#     address = "–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞\n–î–µ–ª–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä –ß–∞–π–∫–∞\n–£–ª–∏—Ü–∞ 40 –ª–µ—Ç –ü–æ–±–µ–¥—ã, 50–ë - –æ—Ñ–∏—Å 332"

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     await state.update_data(
#         cart_items=[
#             {
#                 "product_id": item.product_id,
#                 "quantity": item.quantity,
#                 "total_price": item.quantity * item.price_at_time,
#                 "name": item.product.name,
#                 "price_at_time": item.price_at_time
#             } for item in cart_items
#         ],
#         total_price=total_price,
#         address=address
#     )

#     await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=InlineKeyboardMarkup(
#         inline_keyboard=[
#             [
#                 InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="pickup"),
#                 InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery")
#             ]
#         ]
#     ))
#     await state.set_state(DeliveryState.waiting_for_pickup_datetime)
#     await callback.answer()

# @user_private_router.callback_query(F.data == "pickup")
# async def pickup_selected(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.\n\n–í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å 10:00 –¥–æ 20:00.")
#     await state.set_state(DeliveryState.waiting_for_pickup_datetime)
#     await callback.answer()

# @user_private_router.callback_query(F.data == "delivery")
# async def delivery_selected(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.\n\n–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å 10:00 –¥–æ 20:00.")
#     await state.set_state(DeliveryState.waiting_for_datetime)
#     await callback.answer()

# @user_private_router.message(StateFilter(DeliveryState.waiting_for_pickup_datetime))
# async def pickup_datetime_received(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
#     datetime_str = message.text
#     try:
#         pickup_datetime = datetime.datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
#     except ValueError:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
#         return

#     current_time = datetime.datetime.now()
#     if pickup_datetime <= current_time:
#         await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
#         return

#     if not (10 <= pickup_datetime.hour < 22):
#         await message.answer("–í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å 10:00 –¥–æ 20:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
#         return

#     await state.update_data(pickup_datetime=pickup_datetime)
#     await message.answer("–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞\n–î–µ–ª–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä –ß–∞–π–∫–∞\n–£–ª–∏—Ü–∞ 40 –ª–µ—Ç –ü–æ–±–µ–¥—ã, 50–ë - –æ—Ñ–∏—Å 332")

#     try:
#         await bot.send_location(chat_id=message.chat.id, latitude=OFFICE_COORDS[0], longitude=OFFICE_COORDS[1])
#     except TelegramError as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: {e}")

#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data="payment_na_meste")],
#     ]))
#     await state.set_state(DeliveryState.waiting_for_user_confirmation)

# @user_private_router.message(StateFilter(DeliveryState.waiting_for_datetime))
# async def delivery_datetime_received(message: Message, state: FSMContext, session: AsyncSession):
#     datetime_str = message.text
#     try:
#         delivery_datetime = datetime.datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
#     except ValueError:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
#         return

#     current_time = datetime.datetime.now()
#     if delivery_datetime <= current_time:
#         await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
#         return

#     if not (10 <= delivery_datetime.hour < 22):
#         await message.answer("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å 10:00 –¥–æ 20:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
#         return

#     if (delivery_datetime - current_time).total_seconds() < 3 * 3600:
#         await message.answer("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
#         return

#     await state.update_data(delivery_datetime=delivery_datetime)
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data="payment_na_meste")],
#     ]))
#     await state.set_state(DeliveryState.waiting_for_user_confirmation)

# @user_private_router.callback_query(F.data == "payment_na_meste", StateFilter(DeliveryState.waiting_for_user_confirmation))
# async def payment_na_meste_selected(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     logging.info(f"Data from state: {data}")
#     if 'cart_items' not in data or 'total_price' not in data or 'address' not in data:
#         await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         await state.clear()
#         await callback.answer()
#         return

#     user_id = callback.from_user.id
#     cart_items = data['cart_items']
#     total_price = data['total_price']
#     address = data['address']
#     pickup_datetime = data.get('pickup_datetime')
#     delivery_datetime = data.get('delivery_datetime')
#     order_id = generate_order_id()

#     await state.update_data(order_id=order_id)

#     order_text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n"
#     grouped_items = defaultdict(lambda: {"quantity": 0, "total_price": 0})

#     for item in cart_items:
#         grouped_items[item['product_id']]["quantity"] += item['quantity']
#         grouped_items[item['product_id']]["total_price"] += item['total_price']

#     for product_id, details in grouped_items.items():
#         product = next(item for item in cart_items if item['product_id'] == product_id)
#         order_text += f"–¢–æ–≤–∞—Ä: {product['name']}\n"
#         order_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {details['quantity']}\n"
#         order_text += f"–û–±—â–∞—è —Ü–µ–Ω–∞: {details['total_price']} —Ä—É–±.\n\n"

#     order_text += f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.\n"
#     order_text += f"–ê–¥—Ä–µ—Å: {address}\n"
#     order_text += f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_datetime or delivery_datetime}\n"
#     order_text += f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '–î–∞'."

#     await callback.message.answer(order_text)
#     await state.set_state(DeliveryState.waiting_for_user_confirmation)
#     await callback.answer()

# @user_private_router.message(StateFilter(DeliveryState.waiting_for_user_confirmation))
# async def user_confirmation_received(message: Message, state: FSMContext, session: AsyncSession):
#     if message.text.lower() == "–¥–∞":
#         data = await state.get_data()
#         order_id = data['order_id']
#         user_id = message.from_user.id
#         cart_items = data['cart_items']
#         total_price = data['total_price']
#         address = data['address']
#         pickup_datetime = data.get('pickup_datetime')
#         delivery_datetime = data.get('delivery_datetime')

#         stmt = select(User).where(User.user_id == user_id)
#         result = await session.execute(stmt)
#         user = result.scalar_one_or_none()
#         referrer_id = user.referrer_id if user else None

#         grouped_items = defaultdict(lambda: {"quantity": 0, "total_price": 0})

#         for item in cart_items:
#             grouped_items[item['product_id']]["quantity"] += item['quantity']
#             grouped_items[item['product_id']]["total_price"] += item['total_price']

#         for product_id, details in grouped_items.items():
#             product = next(item for item in cart_items if item['product_id'] == product_id)
#             name = product['name']
#             price_at_time = product['price_at_time']

#             new_order = Order(
#                 product_id=product_id,
#                 price=price_at_time,
#                 quantity=details['quantity'],
#                 name=name,
#                 maker=product.get('maker', ''),
#                 taste=data.get('taste', ''),
#                 user_id=user_id,
#                 referrer_id=referrer_id,
#                 order_number=order_id,
#                 payment_status="–ù–µ –æ–ø–ª–∞—á–µ–Ω",
#                 order_status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
#             )

#             session.add(new_order)
#             await session.commit()

#             try:
#                 await update_product_quantity(session, product_id, details['quantity'])
#             except ValueError as e:
#                 await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

#         await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ (ID: {order_id}) –ø—Ä–∏–Ω—è—Ç. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.")

#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
#         msg_ad = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ–ø–ª–∞—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ!\n"
#                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
#                   f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.\n"
#                   f"–ê–¥—Ä–µ—Å: {address}\n"
#                   f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_datetime or delivery_datetime}\n"
#                   f"–¢–æ–≤–∞—Ä—ã:\n")

#         for product_id, details in grouped_items.items():
#             product = next(item for item in cart_items if item['product_id'] == product_id)
#             msg_ad += f"–¢–æ–≤–∞—Ä: {product['name']},\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {details['quantity']},\n –û–±—â–∞—è —Ü–µ–Ω–∞: {details['total_price']} —Ä—É–±.\n"

#         await bot.send_message(USER_ID, msg_ad)

#         await state.clear()
#     else:
#         await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# def generate_order_id():
#     timestamp = datetime.datetime.now().strftime("%Y%m%d") 
#     random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))  
#     order_id = f"ORD-{timestamp}-{random_part}"
#     return order_id









class DeliveryState(StatesGroup):
    waiting_for_pickup_datetime = State()
    waiting_for_datetime = State()
    waiting_for_address = State()
    waiting_for_phone = State()
    waiting_for_payment_method = State()
    waiting_for_promo_code = State()
    waiting_for_user_confirmation = State()
    waiting_for_promo_confirmation = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞

@user_private_router.message(F.text.lower() == "–∫–æ—Ä–∑–∏–Ω–∞ üõí")
@user_private_router.message(Command("cart"))
async def view_cart(message: types.Message, session: AsyncSession):
    user_id = message.from_user.id
    stmt = select(CartItem).options(selectinload(CartItem.product)).filter(CartItem.user_id == user_id)
    result = await session.execute(stmt)
    cart_items = result.scalars().all()

    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    cart_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total_price = 0
    grouped_items = defaultdict(lambda: {"quantity": 0, "total_price": 0})

    for item in cart_items:
        product = item.product
        item_total_price = item.quantity * item.price_at_time
        grouped_items[product.id]["quantity"] += item.quantity
        grouped_items[product.id]["total_price"] += item_total_price
        total_price += item_total_price

    for product_id, details in grouped_items.items():
        product = next(item.product for item in cart_items if item.product.id == product_id)
        cart_text += f"{product.name} - {details['quantity']} —à—Ç. - {details['total_price']} —Ä—É–±.\n"

    cart_text += f"\n–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±."

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
                InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
            ]
        ]
    )

    await message.answer(cart_text, reply_markup=keyboard)

@user_private_router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    stmt = delete(CartItem).where(CartItem.user_id == user_id)
    await session.execute(stmt)
    await session.commit()

    await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await callback.answer()

@user_private_router.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id
    stmt = select(CartItem).options(selectinload(CartItem.product)).filter(CartItem.user_id == user_id)
    result = await session.execute(stmt)
    cart_items = result.scalars().all()

    if not cart_items:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback.answer()
        return

    total_price = sum(item.quantity * item.price_at_time for item in cart_items)
    address = "–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞\n–î–µ–ª–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä –ß–∞–π–∫–∞\n–£–ª–∏—Ü–∞ 40 –ª–µ—Ç –ü–æ–±–µ–¥—ã, 50–ë - –æ—Ñ–∏—Å 332"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        cart_items=[
            {
                "product_id": item.product_id,
                "quantity": item.quantity,
                "total_price": item.quantity * item.price_at_time,
                "name": item.product.name,
                "price_at_time": item.price_at_time
            } for item in cart_items
        ],
        total_price=total_price,
        address=address,
        name=cart_items[0].product.name,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_id=cart_items[0].product_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º product_id –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        quantity=cart_items[0].quantity,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        order_id=generate_order_id()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º order_id
    )

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="pickup"),
                InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery")
            ]
        ]
    ))
    await state.set_state(DeliveryState.waiting_for_pickup_datetime)
    await callback.answer()


@user_private_router.callback_query(F.data == "pickup")
async def pickup_selected(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.\n\n–í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å 10:00 –¥–æ 20:00.")
    await state.set_state(DeliveryState.waiting_for_pickup_datetime)
    await callback.answer()

@user_private_router.callback_query(F.data == "delivery")
async def delivery_selected(callback: CallbackQuery, state: FSMContext):
    keyboard = [
        [
            InlineKeyboardButton(text="–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∏–π", callback_data="avto"),
            InlineKeyboardButton(text="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data="centr"),
        ],
        [
            InlineKeyboardButton(text="–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π", callback_data="komsomol"),
            InlineKeyboardButton(text="–®–ª—é–∑–æ–≤–æ–π", callback_data="shlyuz")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:", reply_markup=reply_markup)
    await callback.answer()

@user_private_router.callback_query(F.data.in_(["avto", "centr", "komsomol", "shlyuz"]))
async def district_selected(callback: CallbackQuery, state: FSMContext):
    district = callback.data
    await state.update_data(district=district)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.\n\n–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å 10:00 –¥–æ 20:00.")
    await state.set_state(DeliveryState.waiting_for_datetime)
    await callback.answer()

@user_private_router.message(StateFilter(DeliveryState.waiting_for_pickup_datetime))
async def pickup_datetime_received(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    datetime_str = message.text
    try:
        pickup_datetime = datetime.datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
        return

    current_time = datetime.datetime.now()
    if pickup_datetime <= current_time:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
        return

    if not (10 <= pickup_datetime.hour < 22):
        await message.answer("–í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å 10:00 –¥–æ 20:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
        return

    await state.update_data(pickup_datetime=pickup_datetime)
    await message.answer("–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞\n–î–µ–ª–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä –ß–∞–π–∫–∞\n–£–ª–∏—Ü–∞ 40 –ª–µ—Ç –ü–æ–±–µ–¥—ã, 50–ë - –æ—Ñ–∏—Å 332")

    try:
        await bot.send_location(chat_id=message.chat.id, latitude=OFFICE_COORDS[0], longitude=OFFICE_COORDS[1])
    except TelegramError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: {e}")

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–í —Ñ–æ—Ä–º–∞—Ç–µ 89*********.")
    await state.set_state(DeliveryState.waiting_for_phone)

@user_private_router.message(StateFilter(DeliveryState.waiting_for_datetime))
async def delivery_datetime_received(message: Message, state: FSMContext, session: AsyncSession):
    datetime_str = message.text
    try:
        delivery_datetime = datetime.datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
        return

    current_time = datetime.datetime.now()
    if delivery_datetime <= current_time:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
        return

    if not (10 <= delivery_datetime.hour < 22):
        await message.answer("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å 10:00 –¥–æ 20:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
        return

    if (delivery_datetime - current_time).total_seconds() < 3 * 3600:
        await message.answer("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
        return

    await state.update_data(delivery_datetime=delivery_datetime)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
    await state.set_state(DeliveryState.waiting_for_address)

@user_private_router.message(StateFilter(DeliveryState.waiting_for_address))
async def address_received(message: Message, state: FSMContext):
    address = message.text
    await state.update_data(address=address)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–í —Ñ–æ—Ä–º–∞—Ç–µ 89*********.")
    await state.set_state(DeliveryState.waiting_for_phone)

@user_private_router.message(StateFilter(DeliveryState.waiting_for_phone))
async def phone_received(message: Message, state: FSMContext):
    phone = message.text
    if not re.match(r"^8\d{10}$", phone):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 89*********.")
        return

    await state.update_data(phone=phone)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data="payment_na_meste")],
        [InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥", callback_data="payment_promo")],
    ]))
    await state.set_state(DeliveryState.waiting_for_payment_method)

@user_private_router.callback_query(F.data == "payment_na_meste", StateFilter(DeliveryState.waiting_for_payment_method))
async def payment_na_meste_selected(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    logging.info(f"Data from state: {data}")
    if 'cart_items' not in data or 'total_price' not in data or 'address' not in data or 'phone' not in data:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await callback.answer()
        return

    user_id = callback.from_user.id
    cart_items = data['cart_items']
    total_price = data['total_price']
    address = data['address']
    phone = data['phone']
    pickup_datetime = data.get('pickup_datetime')
    delivery_datetime = data.get('delivery_datetime')
    district = data.get('district')
    order_id = generate_order_id()

    await state.update_data(order_id=order_id)

    order_text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n"
    grouped_items = defaultdict(lambda: {"quantity": 0, "total_price": 0})

    for item in cart_items:
        grouped_items[item['product_id']]["quantity"] += item['quantity']
        grouped_items[item['product_id']]["total_price"] += item['total_price']

    for product_id, details in grouped_items.items():
        product = next(item for item in cart_items if item['product_id'] == product_id)
        order_text += f"–¢–æ–≤–∞—Ä: {product['name']}\n"
        order_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {details['quantity']}\n"
        order_text += f"–û–±—â–∞—è —Ü–µ–Ω–∞: {details['total_price']} —Ä—É–±.\n\n"

    delivery_cost = calculate_delivery_cost(district, total_price)
    total_price_with_delivery = total_price + delivery_cost

    order_text += f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price_with_delivery} —Ä—É–±.\n"
    order_text += f"–ê–¥—Ä–µ—Å: {address}\n"
    order_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
    order_text += f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_datetime or delivery_datetime}\n"
    order_text += f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '–î–∞'."

    await callback.message.answer(order_text)
    await state.set_state(DeliveryState.waiting_for_user_confirmation)
    await callback.answer()

@user_private_router.message(StateFilter(DeliveryState.waiting_for_user_confirmation))
async def user_confirmation_received(message: Message, state: FSMContext, session: AsyncSession):
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        order_id = data['order_id']
        user_id = message.from_user.id
        cart_items = data['cart_items']
        total_price = data['total_price']
        address = data['address']
        phone = data['phone']
        pickup_datetime = data.get('pickup_datetime')
        delivery_datetime = data.get('delivery_datetime')
        district = data.get('district')

        stmt = select(User).where(User.user_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        referrer_id = user.referrer_id if user else None

        grouped_items = defaultdict(lambda: {"quantity": 0, "total_price": 0})

        for item in cart_items:
            grouped_items[item['product_id']]["quantity"] += item['quantity']
            grouped_items[item['product_id']]["total_price"] += item['total_price']

        for product_id, details in grouped_items.items():
            product = next(item for item in cart_items if item['product_id'] == product_id)
            name = product['name']
            price_at_time = product['price_at_time']

            new_order = Order(
                product_id=product_id,
                price=price_at_time,
                quantity=details['quantity'],
                name=name,
                maker=product.get('maker', ''),
                taste=data.get('taste', ''),
                user_id=user_id,
                referrer_id=referrer_id,
                order_number=order_id,
                payment_status="–ù–µ –æ–ø–ª–∞—á–µ–Ω",
                order_status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            )

            session.add(new_order)
            await session.commit()

            # try:
            #     await update_product_quantity(session, product_id, details['quantity'])
            # except ValueError as e:
            #     await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

        await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ (ID: {order_id}) –ø—Ä–∏–Ω—è—Ç. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_cost = calculate_delivery_cost(district, total_price)
        total_price_with_delivery = total_price + delivery_cost

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        msg_ad = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ–ø–ª–∞—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ!\n"
                  f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
                  f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.\n"
                  f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost} —Ä—É–±.\n"
                  f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: {total_price_with_delivery} —Ä—É–±.\n"
                  f"–ê–¥—Ä–µ—Å: {address}\n"
                  f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                  f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_datetime or delivery_datetime}\n"
                  f"–¢–æ–≤–∞—Ä—ã:\n")

        for product_id, details in grouped_items.items():
            product = next(item for item in cart_items if item['product_id'] == product_id)
            msg_ad += f"–¢–æ–≤–∞—Ä: {product['name']},\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {details['quantity']},\n –û–±—â–∞—è —Ü–µ–Ω–∞: {details['total_price']} —Ä—É–±.\n"

        await bot.send_message(USER_ID, msg_ad)
        stmt = delete(CartItem).where(CartItem.user_id == user_id)
        await session.execute(stmt)
        await session.commit()


        await state.clear()
    else:
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

@user_private_router.callback_query(F.data == "payment_promo", StateFilter(DeliveryState.waiting_for_payment_method))
async def payment_promo_selected(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(DeliveryState.waiting_for_promo_code)
    await callback.answer()

@user_private_router.message(StateFilter(DeliveryState.waiting_for_promo_code))
async def promo_code_received(message: Message, state: FSMContext, session: AsyncSession):
    promo_code = message.text
    data = await state.get_data()
    total_price = float(data['total_price'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
    name = data.get('name')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    address = data['address']
    pickup_datetime = data.get('pickup_datetime')
    delivery_datetime = data.get('delivery_datetime')
    product_id = data.get('product_id')  # –ü–æ–ª—É—á–∞–µ–º product_id
    quantity = data.get('quantity')  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    success, new_total_price = await activate_promo_code(session, promo_code, total_price)
    if success:
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω. –ù–æ–≤–∞—è —Å—É–º–º–∞: {new_total_price} —Ä—É–±.")
    else:
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    method = "–°" if pickup_datetime else "–î"
    datetime_str = pickup_datetime.strftime('%d%m%Y%H%M') if pickup_datetime else delivery_datetime.strftime('%d%m%Y%H%M')
    payload = f"{method}_{product_id}_{quantity}_{new_total_price}_{name}_{address}_{datetime_str}_{promo_code}"

    await state.update_data(total_price=new_total_price, payload=payload)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order_text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n"
    grouped_items = defaultdict(lambda: {"quantity": 0, "total_price": 0})

    for item in data['cart_items']:
        grouped_items[item['product_id']]["quantity"] += item['quantity']
        grouped_items[item['product_id']]["total_price"] += item['total_price']

    for product_id, details in grouped_items.items():
        product = next(item for item in data['cart_items'] if item['product_id'] == product_id)
        order_text += f"–¢–æ–≤–∞—Ä: {product['name']}\n"
        order_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {details['quantity']}\n"
        order_text += f"–û–±—â–∞—è —Ü–µ–Ω–∞: {details['total_price']} —Ä—É–±.\n\n"

    delivery_cost = calculate_delivery_cost(data.get('district'), new_total_price)
    total_price_with_delivery = new_total_price + delivery_cost

    order_text += f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price_with_delivery} —Ä—É–±.\n"
    order_text += f"–ê–¥—Ä–µ—Å: {address}\n"
    order_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
    order_text += f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_datetime or delivery_datetime}\n"
    order_text += f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '–î–∞'."

    await message.answer(order_text)
    await state.set_state(DeliveryState.waiting_for_promo_confirmation)


@user_private_router.message(StateFilter(DeliveryState.waiting_for_promo_confirmation))
async def promo_confirmation_received(message: Message, state: FSMContext, session: AsyncSession):
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        order_id = data.get('order_id')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        if not order_id:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        user_id = message.from_user.id
        cart_items = data['cart_items']
        total_price = data['total_price']
        address = data['address']
        phone = data['phone']
        pickup_datetime = data.get('pickup_datetime')
        delivery_datetime = data.get('delivery_datetime')
        district = data.get('district')

        stmt = select(User).where(User.user_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        referrer_id = user.referrer_id if user else None

        grouped_items = defaultdict(lambda: {"quantity": 0, "total_price": 0})

        for item in cart_items:
            grouped_items[item['product_id']]["quantity"] += item['quantity']
            grouped_items[item['product_id']]["total_price"] += item['total_price']

        for product_id, details in grouped_items.items():
            product = next(item for item in cart_items if item['product_id'] == product_id)
            name = product['name']
            price_at_time = product['price_at_time']

            new_order = Order(
                product_id=product_id,
                price=price_at_time,
                quantity=details['quantity'],
                name=name,
                maker=product.get('maker', ''),
                taste=data.get('taste', ''),
                user_id=user_id,
                referrer_id=referrer_id,
                order_number=order_id,
                payment_status="–ù–µ –æ–ø–ª–∞—á–µ–Ω",
                order_status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            )

            session.add(new_order)
            await session.commit()

        await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ (ID: {order_id}) –ø—Ä–∏–Ω—è—Ç. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.")

        delivery_cost = calculate_delivery_cost(district, total_price)
        total_price_with_delivery = total_price + delivery_cost

        msg_ad = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ–ø–ª–∞—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ!\n"
                  f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
                  f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.\n"
                  f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost} —Ä—É–±.\n"
                  f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: {total_price_with_delivery} —Ä—É–±.\n"
                  f"–ê–¥—Ä–µ—Å: {address}\n"
                  f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                  f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {pickup_datetime or delivery_datetime}\n"
                  f"–¢–æ–≤–∞—Ä—ã:\n")

        for product_id, details in grouped_items.items():
            product = next(item for item in cart_items if item['product_id'] == product_id)
            msg_ad += f"–¢–æ–≤–∞—Ä: {product['name']},\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {details['quantity']},\n –û–±—â–∞—è —Ü–µ–Ω–∞: {details['total_price']} —Ä—É–±.\n"

        await bot.send_message(USER_ID, msg_ad)
        stmt = delete(CartItem).where(CartItem.user_id == user_id)
        await session.execute(stmt)
        await session.commit()


        await state.clear()
    else:
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")


async def activate_promo_code(session: AsyncSession, promo_code: str, total_price: int) -> tuple[bool, int]:
    stmt = select(Promocode).filter(Promocode.name == promo_code)
    result = await session.execute(stmt)
    promo = result.scalar_one_or_none()

    if promo:
        discount_amount_float = float(promo.discount_amount)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
        if promo.discount_type == 'PERCENT':
            discount = total_price * (discount_amount_float / 100)
        else:
            discount = discount_amount_float
        total_price -= discount
        await delete_promo_code(session, promo_code)
        return True, total_price
    else:
        return False, total_price
    

async def delete_promo_code(session: AsyncSession, promo_code: str):
    stmt = delete(Promocode).where(Promocode.name == promo_code)
    await session.execute(stmt)
    await session.commit()

def calculate_delivery_cost(district, total_price):
    delivery_cost = 0

    if district == "avto":
        if total_price < 1000:
            delivery_cost = 50
    elif district == "centr":
        if total_price < 2000:
            delivery_cost = 100
    elif district == "komsomol":
        if total_price < 3000:
            delivery_cost = 150
    elif district == "shlyuz":
        if total_price < 4000:
            delivery_cost = 200

    return delivery_cost

def generate_order_id():
    timestamp = datetime.datetime.now().strftime("%Y%m%d") 
    random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))  
    order_id = f"ORD-{timestamp}-{random_part}"
    return order_id

