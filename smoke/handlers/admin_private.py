from aiogram import F, Router, types, Bot
from aiogram.filters import Command, StateFilter, or_f


from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from database.models import Promocode, User, Order
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from database.orm_query import (
    orm_get_categories,
    orm_add_product,
    orm_delete_product,
    orm_get_product,
    orm_get_products,
    orm_update_product,
    orm_get_makers_by_category,
    orm_get_products_by_maker,
    get_products_with_tastes,
    get_user_balance,
    update_user_balance,
    get_products_with_tastes_admin

)
from filters.chat_types import ChatTypeFilter, IsAdmin
from kbds.inline import get_callback_btns
from kbds.reply import get_keyboard
from sqlalchemy.exc import IntegrityError
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, insert, delete
from sqlalchemy.orm import joinedload
from datetime import datetime
from database.models import  Product, Promocode, Order, User, Favourite, Category, CartItem

from aiogram.utils.keyboard import InlineKeyboardBuilder

import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())
promokod = []





ADMIN_KB = get_keyboard(
    "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
    "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2,1,2),
)


@admin_router.message(Command("admin"))
async def admin_features(message: types.Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ADMIN_KB)


def get_callback_btns2(*, btns: dict[str, str], sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))
    return keyboard.adjust(*sizes).as_markup()


@admin_router.message(F.text == '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', IsAdmin())
async def admin_category(message: types.Message, session: AsyncSession):
    categories = await orm_get_categories(session=session)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ORM-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    btns = {category.name: f"admin_maker_{category.id}" for category in categories}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_callback_btns2(btns=btns))


@admin_router.callback_query(F.data.startswith("admin_maker_"), IsAdmin())
async def admin_maker(callback: CallbackQuery, session: AsyncSession):
    category_id = int(callback.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback data
    products = await orm_get_makers_by_category(category_id=category_id, session=session)
    btns = {product.maker: f"admin_product_{product.maker}" for product in products}
    await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=get_callback_btns2(btns=btns))
@admin_router.callback_query(F.data.startswith("admin_product_"), IsAdmin())

async def admin_products(callback: CallbackQuery, session: AsyncSession):
    maker = callback.data.split("_")[2]
    products = await get_products_with_tastes_admin(maker=maker, session=session)
    if not products:
        await callback.message.answer(f"–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è {maker}.")
        return

    btns = {product[1]: f"product_{product[0]}_{product[2]}" for product in products}  # Include category_id in the callback data
    await callback.message.edit_text(f"–í–∫—É—Å—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=get_callback_btns2(btns=btns))

@admin_router.callback_query(F.data.startswith("admin_product_"), IsAdmin())
async def admin_products(callback: CallbackQuery, session: AsyncSession):
    maker = callback.data.split("_")[2]
    products = await get_products_with_tastes_admin(maker=maker, session=session)
    if not products:
        await callback.message.answer(f"–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è {maker}.")
        return

    btns = {f"{product.name} ({product.taste})": f"product_{product.id}" for product in products}
    await callback.message.edit_text(f"–í–∫—É—Å—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=get_callback_btns2(btns=btns))


@admin_router.callback_query(F.data.startswith("product_"), IsAdmin())
async def product_details(callback: CallbackQuery, session: AsyncSession):
    product_id = int(callback.data.split("_")[1])  
    product = await orm_get_product(session=session, product_id=product_id)
    if product:
        status = "–°–∫—Ä—ã—Ç" if product.is_closed else "–û—Ç–∫—Ä—ã—Ç"
        if product.image:
            await callback.message.answer_photo(
                photo=product.image,
                caption=f"<strong>üì¶ –¢–æ–≤–∞—Ä:</strong> {product.name}\n<strong>üòã –í–∫—É—Å:</strong> {product.taste}\n<strong>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {product.description}\n\n<strong>‚úÖ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {product.quantity}</strong>\n<strong>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {round(product.price, 2)}\n<strong>üîí –°—Ç–∞—Ç—É—Å:</strong> {status}",
                reply_markup=get_callback_btns2(
                    btns={
                        "–£–¥–∞–ª–∏—Ç—å": f"delete_{product.id}",
                        "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{product.id}",
                    },
                    sizes=(2,)
                ),
            )
        else:
            await callback.message.answer(
                text=f"<strong>üì¶ –¢–æ–≤–∞—Ä:</strong> {product.name}\n<strong>üòã –í–∫—É—Å:</strong> {product.taste}\n<strong>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {product.description}\n\n<strong>‚úÖ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {product.quantity}</strong>\n<strong>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {round(product.price, 2)}\n<strong>üîí –°—Ç–∞—Ç—É—Å:</strong> {status}",
                reply_markup=get_callback_btns2(
                    btns={
                        "–£–¥–∞–ª–∏—Ç—å": f"delete_{product.id}",
                        "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{product.id}",
                    },
                    sizes=(2,)
                ),
                parse_mode="HTML"
            )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("delete_"))
async def delete_product_callback(callback: types.CallbackQuery, session: AsyncSession):
    product_id = callback.data.split("_")[-1]
    await orm_delete_product(session, int(product_id))
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
    await callback.message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")


# class AddProduct(StatesGroup):
#     name = State()
#     description = State()
#     category = State()
#     price = State()
#     image = State()
#     maker = State()
#     quantity = State()
#     taste = State()

#     product_for_change = None

#     texts = {
#         "AddProduct:name": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:",
#         "AddProduct:description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:",
#         "AddProduct:category": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é  –∑–∞–Ω–æ–≤–æ ‚¨ÜÔ∏è",
#         "AddProduct:price": "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ:",
#         "AddProduct:image": "–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...",
#         "AddProduct:maker": "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ:",
#         "AddProduct:quantity": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ:",
#         "AddProduct:taste": "–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å –∑–∞–Ω–æ–≤–æ:",
#     }


# # –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
# @admin_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
# async def add_product(message: types.Message, state: FSMContext):
#     await message.answer(
#         "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=types.ReplyKeyboardRemove()
#     )
#     await state.set_state(AddProduct.name)

# # –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ name –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ description
# @admin_router.message(AddProduct.name, F.text)
# async def add_name(message: types.Message, state: FSMContext):
#     if message.text == "." and AddProduct.product_for_change:
#         await state.update_data(name=AddProduct.product_for_change.name)
#     else:
#         await state.update_data(name=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
#     await state.set_state(AddProduct.description)

# # –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ category
# @admin_router.message(AddProduct.description, F.text)
# async def add_description(message: types.Message, state: FSMContext, session: AsyncSession):
#     if message.text == "." and AddProduct.product_for_change:
#         await state.update_data(description=AddProduct.product_for_change.description)
#     else:
#         await state.update_data(description=message.text)

#     categories = await orm_get_categories(session)
#     btns = {category.name : str(category.id) for category in categories}
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=get_callback_btns(btns=btns))
#     await state.set_state(AddProduct.category)

# # –õ–æ–≤–∏–º callback –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# @admin_router.callback_query(AddProduct.category)
# async def category_choice(callback: types.CallbackQuery, state: FSMContext , session: AsyncSession):
#     if int(callback.data) in [category.id for category in await orm_get_categories(session)]:
#         await callback.answer()
#         await state.update_data(category=callback.data)
#         await callback.message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.')
#         await state.set_state(AddProduct.price)
#     else:
#         await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫.')
#         await callback.answer()

# # –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ price –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ image
# @admin_router.message(AddProduct.price, F.text)
# async def add_price(message: types.Message, state: FSMContext):
#     if message.text == "." and AddProduct.product_for_change:
#         await state.update_data(price=AddProduct.product_for_change.price)
#     else:
#         try:
#             float(message.text)
#         except ValueError:
#             await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
#             return

#         await state.update_data(price=message.text)
#     await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
#     await state.set_state(AddProduct.image)

# # –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ image –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ maker
# @admin_router.message(AddProduct.image, or_f(F.photo, F.text == "."))
# async def add_image(message: types.Message, state: FSMContext):
#     if message.text and message.text == "." and AddProduct.product_for_change:
#         await state.update_data(image=AddProduct.product_for_change.image)
#     elif message.photo:
#         await state.update_data(image=message.photo[-1].file_id)
#     else:
#         await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
#         return
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ç–æ–≤–∞—Ä–∞")
#     await state.set_state(AddProduct.maker)

# # –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ maker –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ quantity
# @admin_router.message(AddProduct.maker, F.text)
# async def add_maker(message: types.Message, state: FSMContext):
#     if message.text == "." and AddProduct.product_for_change:
#         await state.update_data(maker=AddProduct.product_for_change.maker)
#     else:
#         await state.update_data(maker=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")
#     await state.set_state(AddProduct.quantity)

# # –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ quantity –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ taste
# @admin_router.message(AddProduct.quantity, F.text)
# async def add_quantity(message: types.Message, state: FSMContext):
#     if message.text == "." and AddProduct.product_for_change:
#         await state.update_data(quantity=AddProduct.product_for_change.quantity)
#     else:
#         try:
#             int(message.text)
#         except ValueError:
#             await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
#             return

#         await state.update_data(quantity=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å —Ç–æ–≤–∞—Ä–∞")
#     await state.set_state(AddProduct.taste)

# # –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ taste –∏ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# @admin_router.message(AddProduct.taste, F.text)
# async def add_taste(message: types.Message, state: FSMContext, session: AsyncSession):
#     if message.text == "." and AddProduct.product_for_change:
#         await state.update_data(taste=AddProduct.product_for_change.taste)
#     else:
#         await state.update_data(taste=message.text)

#     data = await state.get_data()
#     try:
#         if AddProduct.product_for_change:
#             await orm_update_product(session, AddProduct.product_for_change.id, data)
#         else:
#             await orm_add_product(session, data)
#         await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω", reply_markup=ADMIN_KB)
#         await state.clear()

#     except Exception as e:
#         await message.answer(
#             f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º—É")
class AddProduct(StatesGroup):
    name = State()
    description = State()
    category = State()
    price = State()
    image = State()
    maker = State()
    quantity = State()
    taste = State()
    is_closed = State()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞

    product_for_change = None

    texts = {
        "AddProduct:name": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:",
        "AddProduct:description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:",
        "AddProduct:category": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é  –∑–∞–Ω–æ–≤–æ ‚¨ÜÔ∏è",
        "AddProduct:price": "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ:",
        "AddProduct:image": "–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...",
        "AddProduct:maker": "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ:",
        "AddProduct:quantity": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ:",
        "AddProduct:taste": "–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å –∑–∞–Ω–æ–≤–æ:",
    }

# –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
@admin_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddProduct.name)

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ name –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ description
@admin_router.message(AddProduct.name, F.text)
async def add_name(message: types.Message, state: FSMContext):
    if message.text == "." and AddProduct.product_for_change:
        await state.update_data(name=AddProduct.product_for_change.name)
    else:
        await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.description)

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ category
@admin_router.message(AddProduct.description, F.text)
async def add_description(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text == "." and AddProduct.product_for_change:
        await state.update_data(description=AddProduct.product_for_change.description)
    else:
        await state.update_data(description=message.text)

    categories = await orm_get_categories(session)
    btns = {category.name : str(category.id) for category in categories}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=get_callback_btns(btns=btns))
    await state.set_state(AddProduct.category)

# –õ–æ–≤–∏–º callback –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(AddProduct.category)
async def category_choice(callback: types.CallbackQuery, state: FSMContext , session: AsyncSession):
    if int(callback.data) in [category.id for category in await orm_get_categories(session)]:
        await callback.answer()
        await state.update_data(category=callback.data)
        await callback.message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.')
        await state.set_state(AddProduct.price)
    else:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫.')
        await callback.answer()

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ price –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ image
@admin_router.message(AddProduct.price, F.text)
async def add_price(message: types.Message, state: FSMContext):
    if message.text == "." and AddProduct.product_for_change:
        await state.update_data(price=AddProduct.product_for_change.price)
    else:
        try:
            float(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
            return

        await state.update_data(price=message.text)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.image)

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ image –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ maker
@admin_router.message(AddProduct.image, or_f(F.photo, F.text == "."))
async def add_image(message: types.Message, state: FSMContext):
    if message.text and message.text == "." and AddProduct.product_for_change:
        await state.update_data(image=AddProduct.product_for_change.image)
    elif message.photo:
        await state.update_data(image=message.photo[-1].file_id)
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.maker)

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ maker –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ quantity
@admin_router.message(AddProduct.maker, F.text)
async def add_maker(message: types.Message, state: FSMContext):
    if message.text == "." and AddProduct.product_for_change:
        await state.update_data(maker=AddProduct.product_for_change.maker)
    else:
        await state.update_data(maker=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.quantity)

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ quantity –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ taste
@admin_router.message(AddProduct.quantity, F.text)
async def add_quantity(message: types.Message, state: FSMContext):
    if message.text == "." and AddProduct.product_for_change:
        await state.update_data(quantity=AddProduct.product_for_change.quantity)
    else:
        try:
            int(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
            return

        await state.update_data(quantity=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.taste)

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ taste –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ is_closed
@admin_router.message(AddProduct.taste, F.text)
async def add_taste(message: types.Message, state: FSMContext):
    if message.text == "." and AddProduct.product_for_change:
        await state.update_data(taste=AddProduct.product_for_change.taste)
    else:
        await state.update_data(taste=message.text)

    await message.answer("–¢–æ–≤–∞—Ä –±—É–¥–µ—Ç:", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–∫—Ä—ã—Ç", callback_data="is_closed_true")],
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç", callback_data="is_closed_false")]
        ]
    ))
    await state.set_state(AddProduct.is_closed)

# –õ–æ–≤–∏–º callback –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º/–∏–∑–º–µ–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@admin_router.callback_query(AddProduct.is_closed)
async def add_is_closed(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    is_closed = callback.data == "is_closed_true"
    await state.update_data(is_closed=is_closed)

    data = await state.get_data()
    try:
        if AddProduct.product_for_change:
            await orm_update_product(session, AddProduct.product_for_change.id, data)
        else:
            await orm_add_product(session, data)
        await callback.message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω", reply_markup=ADMIN_KB)
        await state.clear()
    except Exception as e:
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É")
    await callback.answer()


























# class PromocodeManagement(StatesGroup):
#     waiting_for_name = State()
#     waiting_for_value = State()
#     waiting_for_type = State()
#     waiting_for_user_id = State()

# @admin_router.message(F.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏')
# async def manage_promocodes(message: types.Message, state: FSMContext):
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promocode")],
#             [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="view_promocodes")]
#         ]
#     ))

# @admin_router.callback_query(F.data == 'create_promocode')
# async def create_promocode(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
#     await state.set_state(PromocodeManagement.waiting_for_name)
#     await callback.answer()

# @admin_router.message(PromocodeManagement.waiting_for_name)
# async def promocode_name_entered(message: types.Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
#     await state.set_state(PromocodeManagement.waiting_for_value)

# @admin_router.message(PromocodeManagement.waiting_for_value)
# async def promocode_value_entered(message: types.Message, state: FSMContext):
#     try:
#         value = float(message.text)
#         await state.update_data(value=value)
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="–†—É–±–ª–∏", callback_data="RUB")],
#                 [InlineKeyboardButton(text="–ü—Ä–æ—Ü–µ–Ω—Ç—ã", callback_data="PERCENT")]
#             ]
#         ))
#         await state.set_state(PromocodeManagement.waiting_for_type)
#     except ValueError:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

# @admin_router.callback_query(PromocodeManagement.waiting_for_type)
# async def promocode_type_selected(callback: CallbackQuery, state: FSMContext):
#     if callback.data == "PERCENT" and (await state.get_data()).get('value') > 100:
#         await callback.message.answer("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100.")
#         await state.set_state(PromocodeManagement.waiting_for_value)
#     else:
#         await state.update_data(type=callback.data)
#         await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):")
#         await state.set_state(PromocodeManagement.waiting_for_user_id)
#     await callback.answer()

# @admin_router.message(PromocodeManagement.waiting_for_user_id)
# async def promocode_user_id_entered(message: types.Message, state: FSMContext, session: AsyncSession):
#     try:
#         user_id = int(message.text)
#         if user_id != 0:
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ id
#             user = await session.execute(select(User).where(User.user_id == user_id))
#             user = user.scalar()
#             if not user:
#                 await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID –∏–ª–∏ 0, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
#                 return
#             user_id = user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user
#         data = await state.get_data()
#         await session.execute(insert(Promocode).values(
#             name=data['name'],
#             discount_amount=data['value'],
#             discount_type=data['type'],
#             user_id=user_id if user_id != 0 else None
#         ))
#         await session.commit()
#         await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
#         await state.clear()
#     except ValueError:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
#     except IntegrityError as e:
#         await session.rollback()
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
class PromocodeManagement(StatesGroup):
    waiting_for_name = State()
    waiting_for_value = State()
    waiting_for_type = State()
    waiting_for_user_id = State()

@admin_router.message(F.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏')
async def manage_promocodes(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promocode")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="view_promocodes")]
        ]
    ))

@admin_router.callback_query(F.data == 'create_promocode')
async def create_promocode(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    await state.set_state(PromocodeManagement.waiting_for_name)
    await callback.answer()

@admin_router.message(PromocodeManagement.waiting_for_name)
async def promocode_name_entered(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    await state.set_state(PromocodeManagement.waiting_for_value)

@admin_router.message(PromocodeManagement.waiting_for_value)
async def promocode_value_entered(message: types.Message, state: FSMContext):
    try:
        value = float(message.text)
        await state.update_data(value=value)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–†—É–±–ª–∏", callback_data="RUB")],
                [InlineKeyboardButton(text="–ü—Ä–æ—Ü–µ–Ω—Ç—ã", callback_data="PERCENT")]
            ]
        ))
        await state.set_state(PromocodeManagement.waiting_for_type)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

@admin_router.callback_query(PromocodeManagement.waiting_for_type)
async def promocode_type_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "PERCENT" and (await state.get_data()).get('value') > 100:
        await callback.message.answer("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100.")
        await state.set_state(PromocodeManagement.waiting_for_value)
    else:
        await state.update_data(type=callback.data)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):")
        await state.set_state(PromocodeManagement.waiting_for_user_id)
    await callback.answer()

@admin_router.message(PromocodeManagement.waiting_for_user_id)
async def promocode_user_id_entered(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        user_id = int(message.text)
        if user_id != 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ id
            user = await session.execute(select(User).where(User.user_id == user_id))
            user = user.scalar()
            if not user:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID –∏–ª–∏ 0, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                return
            user_id = user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user
        data = await state.get_data()
        await session.execute(insert(Promocode).values(
            name=data['name'],
            discount_amount=data['value'],
            discount_type=data['type'],
            user_id=user_id if user_id != 0 else None
        ))
        await session.commit()
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except IntegrityError as e:
        await session.rollback()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@admin_router.callback_query(F.data == 'view_promocodes')
async def view_promocodes(callback: CallbackQuery, session: AsyncSession):
    stmt = select(Promocode).options(joinedload(Promocode.user))
    result = await session.execute(stmt)
    promocodes = result.scalars().unique().all()

    if not promocodes:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
        await callback.answer()
        return

    for promocode in promocodes:
        user_id = promocode.user.user_id if promocode.user else "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
        promocode_message = (
            f"–ü—Ä–æ–º–æ–∫–æ–¥: {promocode.name}\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ: {promocode.discount_amount} {promocode.discount_type}\n"
            f"–ü—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}"
        )
        await callback.message.answer(promocode_message)

    await callback.answer()




class BalanceManagement(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_action = State()
    waiting_for_amount = State()

@admin_router.message(F.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º', IsAdmin())
async def manage_balance(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å:")
    await state.set_state(BalanceManagement.waiting_for_user_id)

@admin_router.message(BalanceManagement.waiting_for_user_id)
async def user_id_entered(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")],
                [InlineKeyboardButton(text="–û—Ç–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="subtract_balance")],
                [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="view_balance")]
            ]
        ))
        await state.set_state(BalanceManagement.waiting_for_action)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@admin_router.callback_query(BalanceManagement.waiting_for_action)
async def action_selected(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    action = callback.data
    await state.update_data(action=action)
    if action == "view_balance":
        data = await state.get_data()
        user_id = data.get('user_id')
        balance = await get_user_balance(session, user_id)
        await callback.message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance}")
        await state.clear()
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        await state.set_state(BalanceManagement.waiting_for_amount)
    await callback.answer()

@admin_router.message(BalanceManagement.waiting_for_amount)
async def amount_entered(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        amount = int(message.text)
        data = await state.get_data()
        user_id = data.get('user_id')
        action = data.get('action')
        if action == "add_balance":
            await update_user_balance(session, user_id, amount)
            await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ —Å—É–º–º—É {amount}.")
        elif action == "subtract_balance":
            await update_user_balance(session, user_id, -amount)
            await message.answer(f"–° –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–Ω—è—Ç–∞ —Å—É–º–º–∞ {amount}.")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

async def get_user_balance(session: AsyncSession, user_id: int) -> int:
    stmt = select(User.balance).where(User.user_id == user_id)
    result = await session.execute(stmt)
    balance = result.scalar()
    return balance or 0

async def update_user_balance(session: AsyncSession, user_id: int, amount: int):
    stmt = select(User).where(User.user_id == user_id)
    result = await session.execute(stmt)
    user = result.scalar()
    if user:
        user.balance += amount
        await session.commit()
    else:
        await session.rollback()
        raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")











class OrderManagement(StatesGroup):
    viewing_orders = State()
    changing_order_status = State()

@admin_router.message(F.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏', IsAdmin())
async def manage_orders(message: types.Message, state: FSMContext, session: AsyncSession):
    await message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:")
    await state.set_state(OrderManagement.viewing_orders)
    await show_all_orders(message, state, session)

async def show_all_orders(message: types.Message, state: FSMContext, session: AsyncSession):
    stmt = (
        select(Order)
        .options(joinedload(Order.product))
        .where(Order.order_status != '–í—ã–¥–∞–Ω')
        .order_by(Order.id)
    )
    result = await session.execute(stmt)
    orders = result.scalars().unique().all()

    if not orders:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    for order in orders:
        product = order.product
        created_time = datetime.fromisoformat(str(order.created)).strftime('%Y-%m-%d %H:%M:%S')
        order_message = (
            f"–ó–∞–∫–∞–∑: {order.order_number}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user_id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}, –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {product.maker}, –í–∫—É—Å: {product.taste}\n"
            f"–¶–µ–Ω–∞: {order.price}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}\n"
            f"Payment Status: {order.payment_status}\n"
            f"Order Status: {order.order_status}\n"
            f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {created_time}"
        )
        await message.answer(order_message, reply_markup=get_order_status_keyboard(order.id))

def get_order_status_keyboard(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"status_accept_{order_id}")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_cancel_{order_id}")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", callback_data=f"status_ready_{order_id}")],
            [InlineKeyboardButton(text="–í –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data=f"status_delivery_{order_id}")],
            [InlineKeyboardButton(text="–í—ã–¥–∞–Ω", callback_data=f"status_delivered_{order_id}")]
        ]
    )


@admin_router.callback_query(F.data.startswith('status_'))
async def status_selected(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = callback.data.split('_')
    new_status = data[1]
    order_id = int('_'.join(data[2:])) 

    status_mapping = {
        "accept": "–ü—Ä–∏–Ω—è—Ç",
        "cancel": "–û—Ç–º–µ–Ω–µ–Ω",  # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        "ready": "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
        "delivery": "–í –¥–æ—Å—Ç–∞–≤–∫–µ",
        "delivered": "–í—ã–¥–∞–Ω"
    }
    new_status_ru = status_mapping.get(new_status, new_status)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_stmt = select(Order).where(Order.id == order_id)
    order_result = await session.execute(order_stmt)
    order = order_result.scalars().one()

    if new_status == "accept":
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        product_stmt = update(Product).where(Product.id == order.product_id).values(
            quantity=Product.quantity - order.quantity
        )
        await session.execute(product_stmt)
    elif new_status == "cancel":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        product_stmt = update(Product).where(Product.id == order.product_id).values(
            quantity=Product.quantity + order.quantity
        )
        await session.execute(product_stmt)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order_stmt = update(Order).where(Order.id == order_id).values(order_status=new_status_ru)
    await session.execute(order_stmt)
    await session.commit()

    if new_status == "delivered":
        await mark_order_as_delivered(order_id, session)

    await callback.message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status_ru}.")
    await callback.answer()

async def cancel_order(session: AsyncSession, order_id: int):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_stmt = select(Order).where(Order.id == order_id)
    order_result = await session.execute(order_stmt)
    order = order_result.scalars().one()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    product_stmt = update(Product).where(Product.id == order.product_id).values(
        quantity=Product.quantity + order.quantity
    )
    await session.execute(product_stmt)

    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    delete_stmt = delete(Order).where(Order.id == order_id)
    await session.execute(delete_stmt)
    await session.commit()
# @admin_router.callback_query(F.data.startswith('status_'))
# async def status_selected(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
#     data = callback.data.split('_')
#     new_status = data[1]
#     order_id = int('_'.join(data[2:])) 

#     status_mapping = {
#         "accept": "–ü—Ä–∏–Ω—è—Ç",
#         "cancel": "–û—Ç–º–µ–Ω–µ–Ω",  # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
#         "ready": "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
#         "delivery": "–í –¥–æ—Å—Ç–∞–≤–∫–µ",
#         "delivered": "–í—ã–¥–∞–Ω"
#     }
#     new_status_ru = status_mapping.get(new_status, new_status)

#     if new_status == "cancel":
#         await cancel_order(session, order_id)
#     else:
#         stmt = update(Order).where(Order.id == order_id).values(order_status=new_status_ru)
#         await session.execute(stmt)
#         await session.commit()

#         if new_status == "delivered":
#             await mark_order_as_delivered(order_id, session)

#     await callback.message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status_ru}.")
#     await callback.answer()

# async def cancel_order(session: AsyncSession, order_id: int):
#     stmt = delete(Order).where(Order.id == order_id)
#     await session.execute(stmt)
#     await session.commit()


async def mark_order_as_delivered(order_id: int, session: AsyncSession):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ "–í—ã–¥–∞–Ω" –∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ "–û–ø–ª–∞—á–µ–Ω–æ"
    await session.execute(
        update(Order).
        where(Order.id == order_id).
        values(order_status='–í—ã–¥–∞–Ω', payment_status='–û–ø–ª–∞—á–µ–Ω–æ')
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
    result = await session.execute(
        select(Order).
        where(Order.id == order_id)
    )
    order = result.scalars().one()

    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    total_amount = float(order.price) * order.quantity

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_update = update(User).where(User.user_id == order.user_id).values(
        balance=User.balance + int(total_amount * 0.1),
        spent=User.spent + total_amount
    )
    await session.execute(user_update)

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if order.referrer_id:
        referrer_update = update(User).where(User.user_id == order.referrer_id).values(
            balance=User.balance + int(total_amount * 0.05)
        )
        await session.execute(referrer_update)

    await session.commit()